You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.
Return the minimum number of operations needed to make nums strictly increasing.
An array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.

Example 1:
Input: nums = [1,1,1]
Output: 3
Explanation: You can do the following operations:
1) Increment nums[2], so nums becomes [1,1,2].
2) Increment nums[1], so nums becomes [1,2,2].
3) Increment nums[2], so nums becomes [1,2,3].

Example 2:
Input: nums = [1,5,2,4,1]
Output: 14

Example 3:
Input: nums = [8]
Output: 0
 
Constraints:
1 <= nums.length <= 5000
1 <= nums[i] <= 104

Approach: Check for each index if the next index is less than the current index then increase it such as it is 1 more than current index and count the operations in this process.

Code:
  int minOperations(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return 0;
        int operations=0;
        for(int i=0;i<n-1;i++)
        {
            if(nums[i]>=nums[i+1])
            {
                operations+=nums[i]-nums[i+1]+1;
                nums[i+1]=nums[i]+1;
            }
        }
        return operations;
    }