Problem: https://leetcode.com/problems/non-overlapping-intervals
Approach: To find the minimum number of intervals we will sort the given intervals by their end time. Then we will compare the intervals if the current start time is less than the previous ending time that means we have to remove the current interval. Why we are not removing the previous interval? If we choose the current interval then in future the probability to find a interval whose starting time is less than the end time of current interval will be less than probability of its start time is less than the previous end time. Since we sorted based on end time if we take the interval that is ending earlier we lessen the probability getting an overlapping interval. 
Time Complexity: O(nlogn)
Auxiliary Space: O(logn) if we take space used in sorting into consideration
Code:
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end(),[](const vector<int>&a,const vector<int>&b){
            return a[1]<b[1];
        });
        int count =0, n = intervals.size();
        vector<int>prev = intervals[0];
        for(int i=1;i<n;i++){
            if(prev[1]>intervals[i][0]){
                count ++;
            }else{
                prev = intervals[i];
            }
        }
        return count;
    }
};
