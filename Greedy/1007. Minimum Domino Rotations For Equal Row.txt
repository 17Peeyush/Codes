Problem: https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/
Date: 20-03-2022
Time Complexity: O(n)
Auxiliary Space: O(n)
Code:
struct candidate{
        int top;
        int bottom;
        int freq;
        unordered_set<int>index;
        candidate(){
            top=0;
            bottom=0;
            freq=0; 
        }
    };
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        unordered_map<int,candidate*>mp;
        unordered_set<int>s;
        int n=tops.size();
        for(int i=0;i<n;i++){
            if(mp.find(tops[i])==mp.end()){
                mp[tops[i]]=new candidate();
            }
            mp[tops[i]]->top++;
            mp[tops[i]]->freq++;
            mp[tops[i]]->index.insert(i);
            if(mp.find(bottoms[i])==mp.end()){
                mp[bottoms[i]]=new candidate();
            }
            mp[bottoms[i]]->bottom++;
            mp[bottoms[i]]->freq++;
            mp[bottoms[i]]->index.insert(i);
            if(mp[tops[i]]->freq>=n)
            {
                s.insert(tops[i]);
            }
            if(mp[bottoms[i]]->freq>=n)
            {
                s.insert(bottoms[i]);
            }
        }
        if(s.size()==0)
            return -1;
        for(auto x: s)
        {
            if(mp[x]->index.size()<n)
                continue;
            int top=mp[x]->top;
            int bottom=mp[x]->bottom;
            return n-max(top,bottom);
        }
        return -1;
    }
};

Approach 2:
Time Complexity: O(n)
Auxiliary Space: O(1)
Code:
class Solution {
public:
    pair<int,bool> potentialCandidate(vector<int>&tops,vector<int>&bottoms,int can){
        int top=0,bottom=0;
        // bool possible=true;
        int n=tops.size();
        for(int i=0;i<n;i++)
        {
            if(tops[i]==can||bottoms[i]==can)
            {
                if(tops[i]==can){
                    top++;
                }
                if(bottoms[i]==can){
                    bottom++;
                }
            }
            else
            {
                return {INT_MAX,false};
            }
        }
        // cout<<"candidate: "<<can<<"\ttop: "<<top<<"\tbottom: "<<bottom;
        int mx=max(top,bottom);
        return {n-mx,true};
    }
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        vector<int>s={tops[0],bottoms[0]};
        for(auto x: s)
        {
            pair<int,bool>p=potentialCandidate(tops,bottoms,x);
            if(p.second)
            {
                return p.first;
            }
        }
        return -1;
    }
};