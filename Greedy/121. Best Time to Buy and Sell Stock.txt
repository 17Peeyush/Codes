You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 
Constraints:
1 <= prices.length <= 105
0 <= prices[i] <= 104

Approach :
1)
Suppose prices =[a,b,c,d,...,z] so we consider that we buy a stock at day 'i' and try to sell that share on days 'i+1' to 'n-1' and store the max profit.
Similarly we consider for all days from 0 to 'n-2' and calculate max profit.

Time  Complexity: O(n^2)
Space Complexity: O(1)

Code:
int maxProfit(vector<int>& prices) {
        int maxprofit=0,n=prices.size();
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if((prices[j]-prices[i])>maxprofit)
                    maxprofit=prices[j]-prices[i];
            }
        }
        return maxprofit;
}


2)
We consider that we buy a stock on day which have minimum price and try to sell it on the day which have maximum price.
We check everyday is it the minimum price day and update it if it is minimum so farand similar check for the difference of minimum so far price and current day price, and store max profit.

Time  Complexity: O(n)
Space Complexity: O(1)

Code:
 int maxProfit(vector<int>& prices) {
        int minSoFar=prices[0],maxprofit=0;
        for(auto x: prices)
        {
            minSoFar=x<minSoFar?x:minSoFar;
            if(maxprofit<(x-minSoFar))
            {
                maxprofit=x-minSoFar;
            }
        }
        return maxprofit;
    }