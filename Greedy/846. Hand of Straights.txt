Problem: https://leetcode.com/problems/hand-of-straights
Time Complexity: O(nlogn)
Auxillary Space: O(n)
Company: Google
Approach: Stimulating by taking a ordered map and for each group getting the start element and finding if groupSize consecutive elements are present or not.
eg: [1,2,3,2,3,4] => [1,2,3],[2,3,4]
After creating first set deleting one so we get the starting point for the second set.
Code:
class Solution {
public:
    bool isNStraightHand(vector<int>& hand, int groupSize) {
        if(groupSize==1) return true;
        if(hand.size()%groupSize){
            return false;
        }
        map<int,int>mp;
        for(int num:hand){
            mp[num]++;
        }
        int n = hand.size()/groupSize;
        for(int i=0;i<n;i++)
        {
            auto x = mp.begin();
            int curr = x->first;
            mp[curr]-=1;
            if(mp[curr]==0)
            {
                mp.erase(curr);
            }
            for(int j=0;j<groupSize-1;j++)
            {
                if(mp.find(curr+1)==mp.end())
                {
                    return false;
                }
                else{
                    curr++;
                    mp[curr]-=1;
                    if(mp[curr]==0){
                        mp.erase(curr);
                    }
                }
            }
        }
        return true;
    }
};