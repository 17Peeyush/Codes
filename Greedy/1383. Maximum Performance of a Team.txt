Problem: https://leetcode.com/problems/maximum-performance-of-a-team/
Approach:
Time Complexity: O(nlogn)
Auxiliary Space: O(n)
Keep track of the engineers by their efficiency in decreasing order.
Starting from one engineer, to build a team, it suffices to bring K-1 more engineers who have higher efficiencies as well as high speeds.

#define M 1000000007
#define ll long long
class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++)
        {
            v.push_back({efficiency[i],speed[i]});
        }
        sort(v.rbegin(),v.rend());
        ll gspeed=0,mineff;
        priority_queue<int> p;
        ll performance=0;
         for(int i=0;i<k;i++)
        {   
            gspeed+=v[i].second;
            p.push(-v[i].second);
            mineff=v[i].first;
            performance=max(performance,(gspeed*mineff));
        }
        for(int i=k;i<n;i++)
        {
            int erase=p.top();p.pop();
            gspeed+=erase;
            gspeed+=v[i].second;
            mineff=v[i].first;
           performance=max(performance,(gspeed*mineff));
            p.push(-v[i].second);
        }
        return performance%M;
    }