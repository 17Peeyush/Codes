Problem: https://leetcode.com/problems/most-profit-assigning-work
Companies: DoorDash, Amazon, NetEase
Time Complexity: O(nlogn)
Auxillary Space: O(nlogn)
Code:
class Solution {
public:

    int binarySearch(vector<int>diff,int w){
        int n = diff.size();
        int res = 0;
        int l =0,h =n-1,mid;
        while(l<=h){
            mid = l+(h-l)/2;
            if(diff[mid]==w)
            {
                return diff[mid];
            }
            else if(diff[mid]>w){
                h = mid-1;
            }
            else
            {
                res = diff[mid];
                l = mid+1;
            }
        }
        return res;
    }
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        map<int,int> mp;
        int n = difficulty.size();
        for(int i=0;i<n;i++)
        {
            if(mp.find(difficulty[i])==mp.end()){
                mp[difficulty[i]]=profit[i];
            }else{
                mp[difficulty[i]]=max(profit[i],mp[difficulty[i]]);
            }
        }
        int currp=0;
        vector<int> diff(mp.size());
        int i=0;
        for(auto x:mp){
            if(x.second<currp)
            {
                mp[x.first] = currp;
            }
            else
            {
                currp = x.second;
            }
            diff[i]=x.first;
            i++;
        }
        int wprofit =0;
        for(int w: worker)
        {
            if(mp.find(w)==mp.end()){
            wprofit+= mp[binarySearch(diff,w)];
            }
            else
            {
               wprofit+=mp[w];
            }
        }
        return wprofit;
    }
};