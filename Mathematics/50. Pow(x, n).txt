Problem: https://leetcode.com/problems/powx-n/description/
Companies: Google
Time Complexity: O(logn)
Auxiliary SPacce: O(logn)
Code:
class Solution {
public:
    long double helper(double x,long long n){
        long double res=1;
        if(n==0) return 1;
        else if(n==1) return x;
        if(n%2==0){
            //a^n=>(a^(n/2))^2
            res = helper(x,n/2);
            res *=res;
        }
        else{
            //a^n=a*(a^((n-1)/2))^2
            res = helper(x,(n-1)/2);
            res *=res*x;
        }
        return res;
    }
    double myPow(double x, int n) {
        long double res;
        long long pn =n;
        if(n<0)
        {
            res = 1.0/helper(x,-pn);
        }else{
            res = helper(x,n);
        }
        return res;
    }
};