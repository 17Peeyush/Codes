Problem: https://leetcode.com/problems/k-th-smallest-prime-fraction
Time Complexity: O(n^2logk)
Auxiliary Space: O(k)
Code:
class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        priority_queue<pair<double,pair<int,int>>>q;
        int n= arr.size();
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                q.push({arr[i]/double(arr[j]),{arr[i],arr[j]}});
                if(q.size()>k){
                    q.pop();
                }
            }
        }
        vector<int> res={q.top().second.first,q.top().second.second};
        return res;
    }
};