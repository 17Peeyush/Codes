Problem: https://leetcode.com/problems/car-pooling/
Date: 06-01-2022
(1)
Time Complexity: O(nlogn)
Auxiliary Space: O(n)
Code:
class Solution {
public:
  
    bool carPooling(vector<vector<int>>& trips, int capacity) {
        priority_queue<tuple<int,int,int>,vector<tuple<int,int,int>>,greater<tuple<int,int,int>>>pickup,dropoff;
        int n=trips.size();
        for(int i=0;i<n;i++){
            tuple<int,int,int> p,d;
            p={trips[i][1],trips[i][0],i};
            d={trips[i][2],trips[i][0],i};
            pickup.push(p);
            dropoff.push(d);
        }
        int occupied=0;
        while(!pickup.empty()){
            auto p=pickup.top();
            auto d=dropoff.top();
            if(get<0>(p)==get<0>(d))//pickup==drop off
            {
                occupied-=get<1>(d);
                dropoff.pop();
            }
            else if(get<0>(p)<get<0>(d))// pickup less than drop off
            {
                if(occupied+get<1>(p)>capacity){                   
                    return false;
                }
                occupied+=get<1>(p);               
                pickup.pop();
            }
            else{
                 occupied-=get<1>(d);                
                dropoff.pop();
            }
        }
        return true;
    }
};

(2)
Time Complexity: O(n), here 0<=n<=1000 
Auxiliary Space: O(n)
Code:
class Solution {
public:
    bool carPooling(vector<vector<int>>& trips, int capacity) {
     vector<int> stops(1001,0);
        for(auto x:trips){
            stops[x[1]]+=x[0];
            stops[x[2]]-=x[0];
        }
        int occupied=0;
        for(int i=0;i<1001;i++)
        {
            occupied+=stops[i];
            if(occupied>capacity) return false;
        }
        return true;
    }
};
