Problem: https://leetcode.com/problems/merge-k-sorted-lists/
Time Complexity: O(nklogk)
Auxillary Space: O(k)
Code:
class Comparator{
    public:
    bool operator() (ListNode* a, ListNode* b){
        return a->val>b->val;
        //a<b asc
        //a>b desc
    }
};
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int k=lists.size();
        priority_queue<ListNode*,vector<ListNode*>,Comparator>q;
        for(int i=0;i<k;i++)
        {
            if(lists[i])
                q.push(lists[i]);
        }
        //[[],[2,3]]
        ListNode *head=new ListNode(-1),*c=head;
        while(!q.empty())
        {
            auto temp=q.top();
             q.pop();
            if(temp->next) q.push(temp->next);
            c->next=temp;
            c=c->next;
        }
        return head->next;
        
    }