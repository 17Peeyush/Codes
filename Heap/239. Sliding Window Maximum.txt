Problem:https://leetcode.com/problems/sliding-window-maximum/
Approach:
(1)
Time Complexity: O(nlogn)
Auxillary Space: O(n)
Here we are storing element and their index in max heap. Then taking into consideration the top i.e. max element if it is inside the range of index of current window. (i-k)
Code:
  vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        priority_queue<pair<int,int>>q;
        int n=nums.size();
        for(int i=0;i<k;i++)
        {
            q.push({nums[i],i});
        }
        vector<int>out;
        out.push_back(q.top().first);
        for(int i=k;i<n;i++)
        {
            q.push({nums[i],i});
            while(q.top().second<=i-k)
            {
                q.pop();
            }
            out.push_back(q.top().first);
        }
        return out;
    }
(2)
Dequeue
Time Complexity: O(n)
Auxillary Space: O(n)
Here we are using dequeue and always maintaining deque in descending order so that we can get the maxium of a window by accessing front of dequeue.
In each iteration we are checking if the maximum element is in the range of window otherwise it is poped.
And while inserting we are inserting from back so that descending order can be maintained. 
We pop smaller element as the current element is greater than previous so their possibility of becoming maximum for a window is zero as current is greater than it and its index is also greater.
Code:
 vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<pair<int,int>>dq;
        vector<int>out;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            while(!dq.empty()&&dq.front().second<=i-k)
            {
                dq.pop_front();
            }
            while(!dq.empty()&&dq.back().first<=nums[i])
            {
                dq.pop_back();
            }
            dq.push_back({nums[i],i});
            if(i>=k-1)
            {
                out.push_back(dq.front().first);
            }
        }
        return out;
    }