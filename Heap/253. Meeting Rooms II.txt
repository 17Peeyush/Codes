Problem: https://leetcode.com/problems/meeting-rooms-ii
Companies: Facebook, Amazon, Microsoft, Google, Snapchat, Oracle, Bloomberg, Apple, ServiceNow, Nordstrom, Tiktok, IBM, Yandex, Salesforce, eBay, Pinterest, Miro, Uber, Walmart Labs, PayPal, Visa, Cruise Automation, Goldman Sachs, Splunk, ByteDance
Approach 1:
Time Complexity: O(nlogn)
Auxiliary Space: O(n)
Code:
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
        priority_queue<int,vector<int>, greater<int>>q;
        int rooms = 1;
        int n=intervals.size();
        q.push(0);
        int time;
        for(int i=0;i<n;i++)
        {   
            time = q.top();
            if(time<=intervals[i][0])
            {
                q.pop();
            }
            else
            {
                rooms++;
            }
            q.push(intervals[i][1]);
        }
        return rooms;

    }
};

Approach2:
Time Complexity: O(nlogn)
Auxiliary Space: O(n)
Code:
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        int n= intervals.size();
        vector<int> start(n);
        vector<int> end(n);
        for(int i=0;i<n;i++){
            start[i]=intervals[i][0];
            end[i]=intervals[i][1];
        }   
        sort(start.begin(),start.end());
        sort(end.begin(),end.end());
        int sp=0,ep=0,rooms=0;
        while(sp<n){
	    // If there is a meeting that has ended by the time the meeting at `start_pointer` starts
            if(start[sp]>=end[ep])
            {
                rooms--;
                ep++;
            }
	// We do this irrespective of whether a room frees up or not.
      	// If a room got free, then this used_rooms += 1 wouldn't have any effect. used_rooms would
      	// remain the same in that case. If no room was free, then this would increase used_rooms
            sp++;
            rooms++;
        }
        return rooms;
    }
};