Problem: https://leetcode.com/problems/shortest-path-visiting-all-nodes/
Date: 26-022022
Time Complexity: O(2^n*n^2)
Auxillary Space: O(2^n*n)
Code:
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n=graph.size(),allvisited=(1<<n)-1;
        queue<pair<int,int>>q;
        int path=0;
        unordered_set<string>s;
        for(int i=0;i<n;i++){
            q.push({i,1<<i});
            string t=to_string(i)+" "+to_string(1<<i);
            s.insert(t);
        }
        while(!q.empty()){
            int size=q.size();
            while(size--){
                auto x=q.front();
                q.pop();
                if(x.second==allvisited) return path;
                for(auto y:graph[x.first]){
                    int mask=x.second|(1<<y);
                    string t=to_string(y)+" "+to_string(mask);
                    if(s.find(t)==s.end()){
                        q.push({y,mask});
                        s.insert(t);
                    }
                }
            }
            path++;
        }
        return 0;
    }
};