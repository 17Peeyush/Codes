Problem: https://leetcode.com/problems/network-delay-time/
Time Complexity: O(v+eloge)
Auxiliary Space: O(e)
Code:
class Solution {
public:
    void dijkstra(vector<vector<pair<int,int>>>&g,vector<int>&dis,int k,int n)
    {
        dis[k]=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
        q.push({0,k});
        vector<bool>visited(n+1,false);
        while(!q.empty())
        {
            auto x=q.top();
            q.pop();
            int s=x.second,w=x.first;
            if(visited[s]) continue;
            visited[s]=true;
            for(auto y:g[s])
            {
                if(dis[s]+y.second<dis[y.first])
                {
                    dis[y.first]=dis[s]+y.second;
                    q.push({dis[y.first],y.first});
                }
            }
        }
    }
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>>g(n+1);
        int m=times.size();
        for(int i=0;i<m;i++)
        {
            g[times[i][0]].push_back({times[i][1],times[i][2]});
        }
        int MAX=1000;
        vector<int> distance(n+1,MAX);
        dijkstra(g,distance,k,n);
        distance[0]=0;
        int time=*max_element(distance.begin(),distance.end());
        if(time==MAX)
            time=-1;
        return time;
    }
};
