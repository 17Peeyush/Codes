Problem: https://leetcode.com/problems/minimum-cost-to-convert-string-i/description/
Time Complexity: O(m+n+(26)^3), where m is the length of original,changed,cost and n is length of source and target
Auxiliary Space: O(26^26)
Code:
class Solution {
public:
    vector<vector<long long>> g;
    void flyodWarshall(){
        for(int k=0;k<26;k++){
            for(int i=0;i<26;i++){
                for(int j=0;j<26;j++){
                    if(g[i][j]>g[i][k]+g[k][j]){
                        g[i][j] = g[i][k]+g[k][j];
                    }
                }
            }
        }
    }
    void buildGraph(vector<char>&original, vector<char>&changed, vector<int>&cost){
        for(int i=0;i<26;i++){
            g[i][i]=0;
        }
        int n = original.size();
        for(int i=0;i<n;i++){
            g[original[i]-'a'][changed[i]-'a']= min( g[original[i]-'a'][changed[i]-'a'], (long long)cost[i]);
        }
    } 
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        g = vector<vector<long long>>(26,vector<long long>(26,INT_MAX));
        buildGraph(original,changed,cost);
        flyodWarshall();
        long long mincost=0;
        int n = source.size();
        for(int i=0;i<n;i++){
            if(source[i]!=target[i]){
                if(g[source[i]-'a'][target[i]-'a']!=INT_MAX){
                    mincost+= g[source[i]-'a'][target[i]-'a'];
                }
                else
                {
                    return -1;
                }
            }
        }
        return mincost;   
    }
};