Problem: https://leetcode.com/problems/number-of-distinct-islands/
Companies: TikTok, Amazon, Facebook, Microsoft, Oracle, Bloomberg, Apple
Time Complexity: O(m*n), where m is number of rows and n is number of columns
Auxillary Space: O(m*n)
Approach: Find the islands via dfs and then trace the path string. Unique island is unique path string.
Node: for same path string: "RDDDR"
We can have: [[0,0][0,1][1,1][2,1][3,1][3,2]] and [[0,0][0,1][1,1][2,1][2,2][3,1]]
Code:
class Solution {
public:
    vector<vector<bool>> visited;
    int m,n;
    bool isValid(int i,int j){
        if(i<0||i==m||j<0||j==n){
            return false;
        }
        return true;
    }
    void dfs(int i,int j,vector<vector<int>>&grid,string &path){
        visited[i][j]=true;
        //left
        if(isValid(i,j-1)&&grid[i][j-1]&&!visited[i][j-1]){
            path+="L";
            dfs(i,j-1,grid,path);
        }
        //right
        if(isValid(i,j+1)&&grid[i][j+1]&&!visited[i][j+1]){
            path+="R";
            dfs(i,j+1,grid,path);
        }
        //down
        if(isValid(i+1,j)&&grid[i+1][j]&&!visited[i+1][j]){
            path+="D";
            dfs(i+1,j,grid,path);
        }
        //up
        if(isValid(i-1,j)&&grid[i-1][j]&&!visited[i-1][j]){
            path+="U";
            dfs(i-1,j,grid,path);
        }
        //encoding
        path+="0";
    }
    int numDistinctIslands(vector<vector<int>>& grid) {
        unordered_set<string> islands;
        m= grid.size(); n= grid[0].size();
        visited = vector<vector<bool>>(m,vector<bool>(n,false));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]&&!visited[i][j]){
                    string str="S";
                    dfs(i,j,grid,str);
                    islands.insert(str);
                }
            }
        }
        return islands.size();
    }
};