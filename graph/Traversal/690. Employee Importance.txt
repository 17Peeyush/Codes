Problem: https://leetcode.com/problems/employee-importance/
Companies: Google
Time Complexity: O(n)
Auxiliary Space: O(n)
Code:
/*
// Definition for Employee.
class Employee {
public:
    int id;
    int importance;
    vector<int> subordinates;
};
*/

class Solution {
public:
    int getImportance(vector<Employee*> employees, int id) {
        queue<Employee*>q;
        set<int> visited;
        unordered_map<int, Employee*> g;
        int n = employees.size();
        for(int i=0;i<n;i++){
            g[employees[i]->id] = employees[i];
            if(employees[i]->id == id){
                q.push(employees[i]);
            }
        }
        int imp =0;
        while(!q.empty()){
            auto x = q.front();
            q.pop();
            visited.insert(x->id);
            imp+=x->importance;
            for(int sid: x->subordinates){
               if(visited.find(sid)==visited.end())
               {
                 q.push(g[sid]);
                }
            }
        }
        return imp;
    }
};