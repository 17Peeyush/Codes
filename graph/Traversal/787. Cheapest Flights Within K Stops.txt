Problem: https://leetcode.com/problems/cheapest-flights-within-k-stops/
Time Complexity: O(v+e)
Auxillary Space: O(e)
Note: This approach is contributed by ZX007PI
Simple Bfs but for corner cases we are checking if the we have surpassed the k stops then we are checking if the cost of current node if already less than the current cost.
Code:
class Solution {
public:
  int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
    vector<vector<pair<int,int>>>g(n);
    vector<int>costs (n,INT_MAX);
    int answer = INT_MAX;
    for(auto &f: flights) g[f[0]].push_back({f[1], f[2]});
    queue<tuple<int,int,int>> q;
    q.push({0,src,-1});                        
    while(!q.empty()){
      auto[cost, s, tk] = q.front(); q.pop();
      if(s == dst) {answer = min(cost, answer); continue;}
      if(tk++ == k || costs[s] < cost) continue;
      costs[s] = cost;
      for(auto &x: g[s])
       {   
        if(cost + x.second < costs[x.first]){
            q.push({cost + x.second, x.first, tk});}}
    }
    return answer == INT_MAX ? -1 : answer;
  }
};