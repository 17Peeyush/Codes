Problem: https://leetcode.com/problems/clone-graph/
Date: 13-02-2022
Time Complexity: O(n+m), where n is the number of nodes and m is the number of edges.
Auxiliary Space: O(n)
Code:
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    unordered_map<Node*,Node*> mp;
    Node* cloneGraph(Node* node) {
        if(node==nullptr) return nullptr;
        Node * newNode= new Node(node->val);
        mp[node]=newNode;
        for(auto x: node->neighbors)
        {
            if(mp.find(x)==mp.end())
            {
                cloneGraph(x);
            }
            newNode->neighbors.push_back(mp[x]);
        }
        return newNode;        
    }
};