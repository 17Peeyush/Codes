Problem: https://leetcode.com/problems/maximum-number-of-accepted-invitations/description/
You are given an m x n integer matrix grid, where grid[i][j] equals 0 or 1. If grid[i][j] == 1, then that means the ith boy can invite the jth girl to the party. A boy can invite at most one girl, and a girl can accept at most one invitation from a boy.
Return the maximum possible number of accepted invitations.
Example 1:
Input: grid = [[1,1,1],
               [1,0,1],
               [0,0,1]]
Output: 3
Explanation: The invitations are sent as follows:
- The 1st boy invites the 2nd girl.
- The 2nd boy invites the 1st girl.
- The 3rd boy invites the 3rd girl.

Example 2:
Input: grid = [[1,0,1,0],
               [1,0,0,0],
               [0,0,1,0],
               [1,1,1,0]]
Output: 3
Explanation: The invitations are sent as follows:
-The 1st boy invites the 3rd girl.
-The 2nd boy invites the 1st girl.
-The 3rd boy invites no one.
-The 4th boy invites the 2nd girl.
 

Constraints:
grid.length == m
grid[i].length == n
1 <= m, n <= 200
grid[i][j] is either 0 or 1.

Approach:  Kuhn's algorithm
---------------------------------------------------------------------------------------------------------------------------
Kuhn's algorithm finds the largest possible matching between two sets of elements (like applicants and jobs) in a graph:
Initialization: Start with no matches.
Matching Process: Use Depth-First Search (DFS) to explore potential matches, trying to maximize the number of satisfied preferences.
Augmenting Paths: Continuously find paths where unmatched elements can be matched, increasing the size of the matching.
Termination: Stop when no more matches can be made, ensuring the largest possible matching is found.
Efficiency: Runs efficiently with a time complexity of O(Mâ‹…N+E), where M and N are the numbers of elements in each set, and 
E is the number of edges in the graph.
Result: Guarantees the maximum matching by systematically exploring all possible matches through DFS traversal.
---------------------------------------------------------------------------------------------------------------------------

Here we will start letting each boy invite the first girl in here preferance (say preferance as first encounter girl in the grid) and if the boy is able to invite that girl we mark it in a global array match. This will go on till no collision, suppose if we find a collision i.e current boy wants to invite i'th girl but it is invited by some other boy then we will ask that boy to check if he can invite some other girl. If that boy is able to invite some other girl then current boy will invite the i'th girl. If that boy is can't invite any other girl instead of i'th girl, then we will move on and try to invite another girl from our preferance, if no other girl in our preferance then we can't invite any girl, hence we will not increment total_invite.
Time complexity: O(b*g), b is number of boys, g is number of girls
Auxillary Space: O(b+g)
Code:
class Solution {
public:

    vector<int>invites;
    vector<bool>vis;

    bool caninvite(int boy, vector<vector<int>>&g){
        int n = g[0].size();
        for(int i=0;i<n;i++){
            if(g[boy][i]){ // (1) boy can invite ith girl
                if(!vis[i]){
                    vis[i] = true;
                    if(invites[i]==-1||caninvite(invites[i],g)){
                        invites[i] = boy;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    int maximumInvitations(vector<vector<int>>& grid) {
        int boys= grid.size();
        int girls = grid[0].size();
        invites = vector<int>(girls,-1);
        vis = vector<bool>(girls);
        int matches =0; // successful invites
        for(int i=0;i<boys;i++){
            vis.assign(girls,false);
            if(caninvite(i,grid)){
                matches++;
            }
        }
        return matches;
    }
};
