Problem: https://leetcode.com/problems/build-a-matrix-with-conditions/
Time Complextiy: O(mlogm + ve+(v+e)), m is number of edges, ve to form graph , v+e topological sort
Auxiliary Space: O(n)
Code:
class Solution {
public:
    vector<int> getTopological(set<vector<int>>arr, int k){
        unordered_map<int,unordered_set<int>> g;
        unordered_map<int,int>indegree;
        for(auto x: arr){
            indegree[x[1]]++;
            indegree[x[0]];
            if(g.find(x[0])==g.end()){
                g[x[0]]=unordered_set<int>();
            }
            g[x[0]].insert(x[1]);
        }
        queue<int> q;
        for(auto x: indegree){
            if(x.second==0){
                q.push(x.first);
            }
        }
        vector<int>res;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            res.push_back(node);
            for(auto x: g[node]){
                indegree[x]--;
                if(indegree[x]==0){
                    q.push(x);
                }
            }
        }
        if(res.size()!=indegree.size()){
            return {};
        }
        for(int i=1;i<=k;i++)
        {
            if(indegree.find(i)==indegree.end()){
                res.push_back(i);
            }
        }
        return res;
    }
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {
        vector<int>row = getTopological(set<vector<int>>(rowConditions.begin(),rowConditions.end()),k);
        if(row.size()==0) return {};
        vector<int>col = getTopological(set<vector<int>>(colConditions.begin(),colConditions.end()),k);
        if(col.size()==0) return {};
        unordered_map<int,int> mp;
        for(int i=0;i<k;i++){
            mp[col[i]]=i;
        }
        vector<vector<int>>res(k,vector<int>(k,0));
        for(int i=0;i<k;i++)
        {
            res[i][mp[row[i]]]=row[i];
        }
        return res;
    }
};