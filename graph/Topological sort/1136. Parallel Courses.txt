Problem: https://leetcode.com/problems/parallel-courses/
Companies: Google, Uber
Time Comlexity: O(v+e)
Auxiliary Space: O(v)
Code:
class Solution {
public:
    int minimumSemesters(int n, vector<vector<int>>& relations) {
        vector<int> indegree(n,0);
        int m = relations.size();
        vector<vector<int>> g(n,vector<int>());
        for(int i=0;i<m;i++){
            g[relations[i][0]-1].push_back(relations[i][1]-1);
            indegree[relations[i][1]-1]++;
        }
        queue<int> q;
        int semester=0;
        for(int i=0;i<n;i++)
        {
            if(indegree[i]==0){
                q.push(i);
            }
        }
        int t,size;
        while(!q.empty()){
            size=q.size();
            while(size--){
                t=q.front();
                q.pop();
                n--;
                for(auto x: g[t])
                {
                    indegree[x]--;
                    if(indegree[x]==0){
                        q.push(x);
                    }
                }
            }
            semester++;
        }
        if(n!=0) return -1;
        return semester;
    }
};