Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree,
and every node has no left child and only one right child.

Example 1:
Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

Example 2:
Input: root = [5,1,7]
Output: [1,null,5,null,7]
 
Constraints:
The number of nodes in the given tree will be in the range [1, 100].
0 <= Node.val <= 1000

Approach: 
Method 1: Store the values of nodes in vector and create new bst.
Method 2: Create new bst while inorder traversal.

Code:
Method 1:
 void inorder(TreeNode* root,vector<int>&v)
    {
        if(root!=NULL)
        {
            inorder(root->left,v);
            v[root->val]=1;
            inorder(root->right,v);
        }
    }
    
    TreeNode* increasingBST(TreeNode* root) {
        vector<int> v(10001,0);
        inorder(root,v);
        TreeNode* newRoot=new TreeNode(-1);
        TreeNode* c=newRoot;
        for(int i=0;i<10001;i++)
        {
            if(v[i]==1)
            {
                c->right=new TreeNode(i);
                c=c->right;
            }
        }
        return newRoot->right;
        
    }

Method 2:
void inorder(TreeNode* root,TreeNode*&c)
    {
        if(root!=NULL)
        {
            inorder(root->left,c);
            c->right=new TreeNode(root->val);
            c=c->right;
            inorder(root->right,c);
        }
    }
    
    TreeNode* increasingBST(TreeNode* root) {
        TreeNode* newRoot=new TreeNode(-1);
        TreeNode* c=newRoot;
        inorder(root,c);
        return newRoot->right;
        
    }