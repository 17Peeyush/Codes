Problem: https://leetcode.com/problems/binary-tree-maximum-path-sum/
Time Complexity: O(n)
Auxillary Space: O(h), h is the height of binary tree
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int mps(TreeNode* root,int &s)
    {
        if(!root) return 0;
        int l=mps(root->left,s);
        int r=mps(root->right,s);
        int temp=max(max(l,r)+root->val,root->val);
        int ans=max(temp,l+r+root->val);
        s=max(s,ans);
        return temp;
    }
    int maxPathSum(TreeNode* root) {
        int maxSum=INT_MIN;
        mps(root,maxSum);
        return maxSum;
    }
};