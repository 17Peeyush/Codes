Problem: https://leetcode.com/problems/correct-a-binary-tree/
You have a binary tree with a small defect. There is exactly one invalid node where its right child incorrectly points to another node at the same depth but to the invalid node's right.
Given the root of the binary tree with this defect, root, return the root of the binary tree after removing this invalid node and every node underneath it (minus the node it incorrectly points to).

Companies:
Time Complexity: O(n)
Auxiliary Space: O(n)
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_set<TreeNode*>s;
    void traverse(TreeNode* root,TreeNode* parent, int d){
        if(root==nullptr){
            return ;
        }
        if(s.find(root->right)!=s.end()){
            if(d==2){
                parent->right = nullptr;
            }
            else if(d==1){
                parent->left = nullptr;
            }
            return;
        }
        else{
            traverse(root->right,root,2);
        }
        s.insert(root);
        traverse(root->left,root,1);
    }
    TreeNode* correctBinaryTree(TreeNode* root) {
        traverse(root,nullptr,0);
        return root;
    }
};