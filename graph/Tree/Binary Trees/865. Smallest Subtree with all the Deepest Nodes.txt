Problem: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/
Date: 04-04-2022
Time Complexity: O(n)
Auxillary Space: O(n)
Approach: Finding depth of each subtree we will get our answer from the subtree which have more depth so we move towards the subtree having max depth. Once we encounter a root whose both left and right subtree have same depth then it will be our answer.
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     unordered_map<TreeNode*,int>mp;
    int depth(TreeNode* root){
        if(root==nullptr){
            return 0;
        }
        if(mp.find(root)!=mp.end()){
            return mp[root];
        }
        return mp[root]=(1+max(depth(root->left),depth(root->right)));
    }
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        if(root == nullptr){
            return nullptr;
        }
        int ld=depth(root->left);
        int rd=depth(root->right);
        if(ld==rd){
            return root;
        }
        else if(rd>ld){
            return  lcaDeepestLeaves(root->right);
        }
        return lcaDeepestLeaves(root->left);
    }
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        return lcaDeepestLeaves(root);   
    }
};

Approach 2: Find the first and last node of the deepest level and find lca of these nodes.