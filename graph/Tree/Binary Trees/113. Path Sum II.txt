Problem: https://leetcode.com/problems/path-sum-ii/
Time Complexity: O(n), where n is the number of nodes in the tree
Auxiliary Space: O(h), where h is the height of the tree
Code:
class Solution {
public:
    vector<vector<int>>out;
    void find(TreeNode* root,int sum,int target,vector<int>&path)
    {
        if(!root) return;
        sum+=root->val;
        path.push_back(root->val);
        if(sum==target)
        {
            if(!root->left&&!root->right)
            {
                out.push_back(path);
            }
        }
        find(root->left,sum,target,path);
        find(root->right,sum,target,path);
        path.pop_back();
        sum-=root->val;
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int>path;
        find(root,0,targetSum,path);
        return out;
    }
};