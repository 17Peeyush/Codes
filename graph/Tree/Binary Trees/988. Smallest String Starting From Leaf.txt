Problem: https://leetcode.com/problems/smallest-string-starting-from-leaf/
Time Complexity: O(n)
Auxiliary Space: O(n), stack space used 
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

unordered_map<int,char>mp;
std::priority_queue<std::string> maxHeap;
void inorder(TreeNode * root, string c){
    c+=mp[root->val];
    if(root->left == nullptr && root->right==nullptr){
        reverse(c.begin(), c.end());
        maxHeap.push(c);
        if(maxHeap.size()>1)
        {
            maxHeap.pop();
        }
    }
    if(root->left!=nullptr)
        inorder(root->left,c);
    if(root->right!=nullptr)
        inorder(root->right,c);
}
    string smallestFromLeaf(TreeNode* root) {
        int i=0;
        for(char ch='a';ch<='z';ch++,i++){
            mp[i]=ch;
        }
        string c="";
        inorder(root,c);
        return maxHeap.top();
    }
};