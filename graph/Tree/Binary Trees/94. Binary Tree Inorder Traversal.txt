Problem: https://leetcode.com/problems/binary-tree-inorder-traversal/
Time Complexity: O(n)
Auxiliary Space: O(1)
Morris Inorder Traversal
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> MorrisTraversal(TreeNode* root){
        TreeNode* curr=root;
        vector<int>output;
        while(curr)
        {
            if(!curr->left)
            {
                output.push_back(curr->val);
                curr=curr->right;
            }
            else
            {
                TreeNode *prev=curr->left;
                while(prev->right!=nullptr&&prev->right!=curr)
                {
                    prev=prev->right;
                }
                if(prev->right==nullptr)
                {
                    prev->right=curr;
                    curr=curr->left;
                }
                else
                {
                    output.push_back(curr->val);
                    prev->right=nullptr;
                    curr=curr->right;
                }
            }
        }
        return output;
    }
    vector<int> inorderTraversal(TreeNode* root) {
        if(!root) return {};
        return MorrisTraversal(root);
    }
};