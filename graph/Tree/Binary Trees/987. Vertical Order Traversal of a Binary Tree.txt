Problem: https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/
Approach: 
Time Complexity: O(n*nlogn)
Auxillary Space: O(n)
Assigning vd(vertical distance) '0' to root and then from left child vd will be vd-1 andd for right child vd will vd+1.
We will do this for all the nodes and nodes having same vd will come together. 
Code:
class Solution {
public:
    bool static comp(pair<int,int>a,pair<int,int>b)
    {
        if(a.first==b.first)
        {
            return a.second<b.second;
        }
        return a.first<b.first;
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        queue<pair<int,TreeNode*>>q;
        map<int,vector<pair<int,int>>>mp;
        q.push({0,root});
        int level=0;
        while(!q.empty())
        {
            int size=q.size();
            while(size--)
            {
                auto x=q.front();q.pop();
                if(mp.find(x.first)==mp.end())
                {
                    mp[x.first]=vector<pair<int,int>>();
                }
                TreeNode*temp=x.second;
                mp[x.first].push_back({level,temp->val});
                if(temp->left!=nullptr)
                {
                    q.push({x.first-1,temp->left});
                }
                if(temp->right!=nullptr)
                {
                    q.push({x.first+1,temp->right});
                } 
            }
            level++;
        }
        vector<vector<int>>out;
        for(auto x:mp)
        {
            sort(x.second.begin(),x.second.end(),comp);
            vector<int>t;
            for(auto y: x.second)
            {
                t.push_back(y.second);
            }
            out.push_back(t);
        }
        return out;
    }
};