Problem: https://leetcode.com/problems/maximum-width-of-binary-tree/
Date: 27-02-2022
Time Complexity: O(n)
Auxiliary Space: O(n)
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*,long long>>q;
        int width=0;
        q.push({root,1});
        while(!q.empty()){
            int size=q.size();
            int t_width=q.back().second-q.front().second+1;
            int adjust= q.front().second;
            width=max(width,t_width);
            while(size--){
                auto x=q.front();
                q.pop();
                int new_id=x.second-adjust;
                if(x.first->left !=nullptr)
                {
                    q.push({x.first->left,(long long)2*new_id+1});
                }
                if(x.first->right !=nullptr)
                {
                    q.push({x.first->right,(long long)2*new_id+2});
                }
            }
        }
        return width;
    }
};

