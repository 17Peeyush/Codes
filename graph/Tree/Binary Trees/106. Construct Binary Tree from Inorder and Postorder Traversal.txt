Problem: https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
Time Complexity: O(n)
Auxillary Space: O(n)
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int>mp;
    TreeNode* treebuild(vector<int>&inorder,vector<int>&postorder,int l,int h,int& i)
    {
        if(l>h) return nullptr;
        TreeNode* root=new TreeNode(postorder[i--]);
        int ridx=mp[root->val];
        root->right=treebuild(inorder,postorder,ridx+1,h,i);
        root->left=treebuild(inorder,postorder,l,ridx-1,i);
        return root;        
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int h=inorder.size()-1;
        for(int i=0;i<=h;i++)
        {
            mp[inorder[i]]=i;
        }
        return treebuild(inorder,postorder,0,h,h);
    }
};