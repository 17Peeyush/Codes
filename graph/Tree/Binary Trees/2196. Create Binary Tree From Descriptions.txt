Problem: https://leetcode.com/problems/create-binary-tree-from-descriptions/description/
Time Complexity: O(n)
Auxiliary Space: O(n)
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        unordered_map<int,TreeNode*>mp;
        unordered_set<int> parent;
        unordered_set<int>child;
        for(auto x: descriptions){
            if(mp.find(x[0])==mp.end()){
                mp[x[0]] = new TreeNode(x[0]);
            }
            if(mp.find(x[1])==mp.end()){
                mp[x[1]] = new TreeNode(x[1]);
            }
            parent.insert(x[0]);
            parent.erase(x[1]);
            child.insert(x[1]);
            if(x[2]){
                mp[x[0]]->left = mp[x[1]];
            }
            else{
                mp[x[0]]->right = mp[x[1]];
            }
        }
        for(auto x: parent)
        {
            if(child.find(x)==child.end()){
                return mp[x];
            }
        }
        return nullptr;
    }
};