Problem: 
Time Complexity: O(n), n is number of nodes
Auxillary Space: O(n)

Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        if(root == nullptr) return false;
        queue<TreeNode*> q;
        q.push(root);
        int level =0, qSize =0, el=-1;
        TreeNode* currElement = nullptr;
       int firstEl = 0;
        while(!q.empty()){
            qSize = q.size();
            firstEl = 0;
            while(qSize--){
                currElement = q.front(), q.pop();
                if(level%2)// odd level
                {
                    if(currElement->val%2) return false;
                }
                else
                {
                    if(currElement->val%2==0) return false;
                }
                if(firstEl==0)
                {
                    el = currElement->val;
                }
                else{
                    if(level %2 ==0)
                    {
                        if(currElement->val <= el) return false; 
                    }
                    else
                    {
                        if(currElement->val >= el) return false;
                    }
                    el = currElement -> val;
                }
                if(currElement->left!=nullptr){
                    q.push(currElement->left);
                }
                if(currElement->right!=nullptr){
                    q.push(currElement->right);
                }
                firstEl++;
            }
            level ^= 1;
        }
        return true;
    }
};