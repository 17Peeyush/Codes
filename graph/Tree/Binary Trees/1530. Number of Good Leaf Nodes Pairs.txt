Problem: https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/description
Appraoch 1:
Time Complexity: O(n.d^2), where n is number of nodes and d is the path for each leaf node
Auxiliary Space: O(n)
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int count =0;

    vector<int> postorder(TreeNode* root, const int&dis){
        if(root == nullptr) return {};
        if(root->left==nullptr && root->right==nullptr){
            return {1};
        }
        vector<int> l = postorder(root->left,dis);
        vector<int> r = postorder(root->right,dis);
        for(auto x:l){
            for(auto y:r){
                if(x+y<=dis){
                    count++;
                }
            }
        }
        vector<int> d;
        for(int x:l){
            d.push_back(x+1);
        }
        for(int x:r){
            d.push_back(x+1);
        }
        return d;
    }
    int countPairs(TreeNode* root, int distance) {
        postorder(root,distance);
        return count;
    }
};

Approach 2:
Time Complexity: O(n+d^2) , where n is number of nodes and d is the average path length of leaf nodes
Auxiliary Space: O(d)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>>path;//2->root, 0->left,1->right
    void helper(TreeNode* root, vector<int> &t){
        //if(root==nullptr) return;
        if(root->left==nullptr&&root->right==nullptr){
            path.push_back(t);
            return;
        }
        if(root->left!=nullptr){
            t.push_back(0);
            helper(root->left,t);
            t.pop_back();
        }
        if(root->right!=nullptr){
            t.push_back(1);
            helper(root->right,t);
            t.pop_back();
        }
    }

    bool compare(const vector<int>&a,const vector<int>&b,const int &dist){
        int n = a.size();
        int m = b.size();
        int i=0,j=0;
        while(i<n&&j<m && a[i]==b[j])
        {
            i++;j++;
        }
        if((n-i)+(m-j)<=dist){
            return true;
        }
        return false;
    }   
    
        int countPairs(TreeNode* root, int distance) {
        vector<int>temp{2};
        helper(root,temp);
        int count =0;
        int n = path.size();
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(compare(path[i],path[j],distance)){
                    count++;
                }
            }
        }
        return count;
    }
};