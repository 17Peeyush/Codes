Problem: https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

Approach: Used a queue to perform bfs and an additional parameter in queue which is used to store level of of node. 
Root of the tree is at level 0 for root child the level is 1 and so on.
Use a stack or reverse the vectir in which level order traversal is stored.

Time Complexity: O(n) where n is the number of nodes in the binary tree
The number of leaf nodes in a full binary tree with n nodes is equal to (n+1)/2
Auxiliary Space: O((n+1)/2) used queue

Code:
 vector<vector<int>> levelOrderBottom(TreeNode* root) {
       if(root==nullptr) return {};
        queue<TreeNode*>q;
        vector<vector<int>> out;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            vector<int> temp;
            for(int i=0;i<size;i++)
            {
                TreeNode* c=q.front();q.pop();
                temp.push_back(c->val);
                if(c->left!=nullptr) q.push(c->left);
                if(c->right!=nullptr) q.push(c->right);
            }
            out.push_back(temp);
        }
        vector<vector<int>>ans;
        for(int i=out.size()-1;i>=0;i--)
            ans.push_back(out[i]);
        return ans;
    }