Problem: https://leetcode.com/problems/check-completeness-of-a-binary-tree/
Time Complexity: O(n)
Auxillary Space: O(n)
Date: 25-10-2021
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        bool null=false;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* curr=q.front();
            q.pop();
            if(curr==nullptr)
            {
                null=true;
            }
            else
            {
                if(null) return false;
                q.push(curr->left);
                q.push(curr->right);
            }
        }
        return true;
    }
};