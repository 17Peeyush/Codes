Problem: https://leetcode.com/problems/binary-tree-right-side-view/
Time Complexity: O(n)
Auxillary Space: O(l), where l is the maximum number of nodes in a level
Code:
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(!root) return {};
        vector<int>rightView;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            while(size--)
            {
                auto x=q.front();q.pop();
                if(!size)
                {
                    rightView.push_back(x->val);
                }
                if(x->left!=nullptr)
                {
                    q.push(x->left);
                }
                if(x->right!=nullptr)
                {
                    q.push(x->right);
                }
            }
        }
        return rightView; 
    }
};