Problem: https://leetcode.com/problems/print-binary-tree/description/
Companies: Google
Time Complexity: O(n), number of nodes
Auxillary Space: O(r,c) where r = height of tree +1, c = 2^(height+1)-1
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height =-1;
    int findHeight(TreeNode* root){
        if(root==nullptr){
            return 0;
        }
        return 1+max(findHeight(root->left), findHeight(root->right));
    }

    void preorder(int r, int c, TreeNode*root, vector<vector<string>> & res){
        if(root==nullptr) return;
        res[r][c] = to_string(root->val);
        preorder(r+1, c-pow(2,height-r-1), root->left,res);
        preorder(r+1, c+pow(2,height-r-1), root->right,res);
    }


    vector<vector<string>> printTree(TreeNode* root) {
        height = findHeight(root)-1;
        int m = height+1, n = pow(2, height+1)-1;
        vector<vector<string>> res(m, vector<string>(n,""));
        preorder(0, (n-1)/2, root,res);
        return res;
    }
};