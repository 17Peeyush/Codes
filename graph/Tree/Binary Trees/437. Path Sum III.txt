Problem: https://leetcode.com/problems/path-sum-iii/
Time Complexity: O(n^n)
Auxillry Space: O(n)
Date: 17-10-2021
Code: 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int count=0;
    void traverse(TreeNode* root,int targetSum)
    {
        if(!root) return;
        if(root->val==targetSum)
        {
            count++;
        }
        targetSum-=root->val;
        traverse(root->left,targetSum);
        traverse(root->right,targetSum);
    }
    void helper(TreeNode*root,int targetSum)
    {
      if(!root) return;
      traverse(root,targetSum);
      helper(root->left,targetSum);
      helper(root->right,targetSum);
    }
    int pathSum(TreeNode* root, int targetSum) {
      helper(root,targetSum);
        return count;
    }
};