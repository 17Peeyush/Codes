Problem: https://leetcode.com/problems/binary-tree-cameras/
Time Complexity: O(n)
Auxillary Space: O(n)
Date: 14-11-2021
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int camera=0;
    int need=0,covered=1,campresent=2;
    int minCam(TreeNode* root){
        if(!root) return covered;
        int leftc=minCam(root->left);
        int rightc=minCam(root->right);
        if(leftc==need||rightc==need)
        {
            camera++;
            return campresent;
        }
        else if(leftc==campresent&&rightc==campresent)
        {
            return covered;
        }
        else if((leftc==campresent&&rightc==covered)||(leftc==covered&&rightc==campresent))
        {
            return covered;
        }
        else if(leftc==covered&&rightc==covered)
        {
            return need;
        }
        return -1;
    }
    int minCameraCover(TreeNode* root) {
       int k=minCam(root);
        if(k==need){
          camera++;}
       return camera;
    }
};