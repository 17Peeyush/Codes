Problem: https://leetcode.com/problems/n-ary-tree-postorder-traversal/
Time Complexity: O(n), n is number of node
Auxiliary space: O(h), h is height of the tree.
Code:
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int> res;
    void helper(Node* root){
        if(root==nullptr) return;
        int n = root->children.size();
        for(int i=0;i<n;i++){
            helper(root->children[i]);
        }
        res.push_back(root->val);
    }
    vector<int> postorder(Node* root) {
        helper(root);
        return res;
    }
};