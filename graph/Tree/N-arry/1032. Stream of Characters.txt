Problem: https://leetcode.com/problems/stream-of-characters/
Time Complexity: Insert and Search -> O(word_length) 
Auxiliary Space: O(ALPHABET_SIZE * word_length * N), where N is the number of words
Date: 04-12-2021
Code:
struct TrieNode{
    vector<TrieNode*> alpha;
    bool wordEnd;
    TrieNode(){
        alpha=vector<TrieNode*>(26,nullptr);
        wordEnd=false;
    }
};
class StreamChecker {
public:
    TrieNode * root;
    string s;
    TrieNode *p;
    int mxlen=-1;
    void insert(string word){
        int n=word.length();
        p=root;
        for(int i=n-1;i>=0;i--){
            if(p->alpha[word[i]-'a']==nullptr){
                p->alpha[word[i]-'a']=new TrieNode();
            }
            p=p->alpha[word[i]-'a'];
        }
        p->wordEnd=true;
    }
    
    bool search(string suffix){
        int n=suffix.length();
        p=root;
        for(int i=n-1;i>=0;i--){
            if(p->wordEnd)
            {
                return true;
            }
            else if(p->alpha[suffix[i]-'a']==nullptr){
                return false;
            }
            else
            {
                p=p->alpha[suffix[i]-'a'];
            }
        }
        return p->wordEnd;
    }
    StreamChecker(vector<string>& words) {
        root=new TrieNode();
        s="";
        for(auto x:words)
        {
            insert(x);
            int m=x.length();
            mxlen=max(mxlen,m);
        }
    }
    
    bool query(char letter) {
        s+=letter;
        if(s.length()>mxlen)
        {
            s=s.substr(s.length()-mxlen);
        }
        return search(s);
    }
};

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */