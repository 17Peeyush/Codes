Problem: https://leetcode.com/problems/implement-trie-prefix-tree/
Time Complexity: Insert and Search -> O(word_length) 
Auxiliary Space: O(ALPHABET_SIZE * word_length * N), where N is the number of words
Date: 08-10-2021
Code:
struct TrieNode
{
    vector<TrieNode*> alpha;
    bool wordend;
    
    TrieNode()
    {
        alpha=vector<TrieNode*>(26,nullptr);
        wordend=false;
    }
};
class Trie {
public:
    TrieNode* root;
    Trie() {
        root=new TrieNode();
    }
    
    void insert(string word) {
        int n=word.length();
        TrieNode* p=root;
        for(int i=0;i<n;i++)
        {
            if(p->alpha[word[i]-'a']==nullptr)
            {
                p->alpha[word[i]-'a']=new TrieNode();
                
            }
                p=p->alpha[word[i]-'a'];
        }
        p->wordend=true;
    }
    
    bool search(string word) {
        int n=word.length();
        TrieNode* p=root;
        for(int i=0;i<n;i++)
        {
            if(p->alpha[word[i]-'a']==nullptr)
            {
                return false;
            }
            else
            {
                p=p->alpha[word[i]-'a'];
            }
        }
        return p->wordend;
    }
    
    bool startsWith(string prefix) {
        int n=prefix.length();
        TrieNode* p=root;
        for(int i=0;i<n;i++)
        {
            if(p->alpha[prefix[i]-'a']==nullptr)
            {
                return false;
            }
            else
            {
                p=p->alpha[prefix[i]-'a'];
            }
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */