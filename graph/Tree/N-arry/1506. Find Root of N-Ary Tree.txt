Problem: You are given all the nodes of an N-ary tree as an array of Node objects, where each node has a unique value.
Return the root of the N-ary tree.
Alternate: 
You are given a list of all the nodes of the tree in RANDOM order. Figure out which one is the root and return it.
Companies: Google, Bloomberg
Approach 1: For each node we will iterate its children and insert it in the set. Only the root node will be the node whose parent is not present hence it will never be interated as a child and won't be present in our set. After this we will iterate again on the inout array the element that is not present in the set will be our root node.
Time Complexity: O(n)
Auxiliary Space: O(n)
Code:
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    unordered_set<Node*>child;
    Node* findRoot(vector<Node*> tree) {
        for(auto x:tree){
            for(auto y:x->children){
                child.insert(y);
            }
        }
        Node* root = nullptr;
        for(auto x:tree){
            if(child.find(x)==child.end()){
                root = x;
                break;
            }
        }
        return root;
    }
};


Approach 2: We know that by first approach we will be looking at each child node 2 times once when we treat it as a parent and iterate its child and once it is treated as child. So if we take the help of xor then we can eleminate all the elements which we have traversed twice and will be left with the root element as it is only traversed once when treated as parent. So we can iterate the input array and compare the value of each node and the one equal to xor value is the root node.
Time Complexity: O(n)
Auxiliary Space: O(1)
Code:
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    Node* findRoot(vector<Node*> tree) {
        int xors = 0;
        for(auto x:tree){
            xors=xors^x->val;
            for(auto y:x->children){
                xors=xors^y->val;
            }
        }
        Node* root = nullptr;
        for(auto x:tree){
            if(xors==x->val){
                root = x;
                break;
            }
        }
        return root;
    }
};