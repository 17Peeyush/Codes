Problem: https://leetcode.com/problems/recover-binary-search-tree/
(1)
Time Complexity: O(n), where n is the number of nodes in the bst
Auxiliary Space: O(n)
Date: 14-10-2021
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     vector<int> sorted;
     unordered_map<int,TreeNode*>mp;
    void inorder(TreeNode* root)
    {
        if(!root) return ;
        inorder(root->left);
        mp[root->val]=root;
        sorted.push_back(root->val);
        inorder(root->right);
    }
    void recoverTree(TreeNode* root) {
       inorder(root);
       int n=sorted.size();
       int i,j;
       for(i=n-1;i>0;i--)
       {
           if(sorted[i]<sorted[i-1])
           {
               break;
           }
       }
        for(j=0;j<i;j++)
        {
            if(sorted[j]>sorted[i])
            {
                break;
            }
        }
        mp[sorted[i]]->val=sorted[j];
        mp[sorted[j]]->val=sorted[i];
    }
};

(2)
Time Complexity: O(n)
Auxiliary Space: O(logn)
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *first=nullptr,*second=nullptr,*prev=new TreeNode(INT_MIN);
    void inorder(TreeNode *root){
        if(!root) return;
        inorder(root->left);
        if(first==nullptr&&prev->val>root->val)
        {
            first=prev;
        }
         if(first!=nullptr&&prev->val>root->val)
        {
            second=root;
        }
        prev=root;
        inorder(root->right);
    }
    void recoverTree(TreeNode* root) {
        inorder(root);
        int temp=first->val;
        first->val=second->val;
        second->val=temp;
    }
};