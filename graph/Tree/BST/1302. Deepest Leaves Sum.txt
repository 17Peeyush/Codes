Problem: https://leetcode.com/problems/deepest-leaves-sum/
Time Complexity: O(n)
Auxillary Space: O(1)
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int dlevel=-1,dsum=0;
    void traverse(TreeNode* root,int level)
    {
        if(!root) return;
        if(level>dlevel)
        {
            dlevel=level;
            dsum=root->val;
        }
        else if(level==dlevel)
        {
            dsum+=root->val;
        }
        traverse(root->left,level+1);
        traverse(root->right,level+1);
    }
    int deepestLeavesSum(TreeNode* root) {
        traverse(root,1);
        return dsum;
    }
};