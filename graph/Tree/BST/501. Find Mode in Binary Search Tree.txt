Problem: https:https://leetcode.com/problems/find-mode-in-binary-search-tree/
Time Complexity: O(n)
Auxillary Space: O(n)
Date: 01-11-2023
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int> frequency;
    void inorder(TreeNode* root)
    {
        if(root==nullptr)
        return;
        inorder(root->left);
        frequency[root->val]++;
        inorder(root->right);
    }
    vector<int> findMode(TreeNode* root) {
        inorder(root);
        priority_queue<pair<int,int>> q;
        for(auto x: frequency)
        {
            q.push({x.second, x.first});
        }
        int maxi=INT_MIN;
        vector<int> result;
        while(!q.empty())
        {
            maxi=q.top().first;
            result.push_back(q.top().second);
            q.pop();
            if(maxi!=q.top().first)
            break;
        }
        return result;
    }
};