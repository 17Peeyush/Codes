Problem: https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/
Time Complexity: O(n), where n is the number of nodes in the binary tree
Auxiliary Space: O(l), where l is the number of levels in the binary tree
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int> mp;
    void traverse(TreeNode* root,int level)
    {
        if(!root) return;
        mp[level]+=root->val;
        traverse(root->left,level+1);
        traverse(root->right,level+1);
    }
    int maxLevelSum(TreeNode* root) {
        int level=1;
        traverse(root,level);
        int maxlevel=-1,msum=INT_MIN;
        for(auto x: mp)
        {
            if(x.second>msum)
            {
                msum=x.second;
                maxlevel=x.first;
            }
            else if(x.second==msum)
            {
                maxlevel=min(maxlevel,x.first);
            }
        }
        return maxlevel;
    }
};