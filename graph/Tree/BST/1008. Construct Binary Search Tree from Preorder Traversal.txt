Problem: https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/
Time Complexity: O(n)
Auxiliary Space: O(n)
Date: 13-10-2021
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildbst(int l,int r,vector<int>&preorder)
    {
        if(l==r)
        {
            TreeNode* root= new TreeNode(preorder[l]);
            return root;
        }
        if(l<r)
        {
            TreeNode* root=new TreeNode(preorder[l]);
            int i=l;
            for(;i<=r;i++)
            {
                if(preorder[i]>root->val)
                {
                    break;
                }
            }
            root->left=buildbst(l+1,i-1,preorder);
            root->right=buildbst(i,r,preorder);
            return root;
        }
        return nullptr;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int n=preorder.size();
        return buildbst(0,n-1,preorder);
    }
};