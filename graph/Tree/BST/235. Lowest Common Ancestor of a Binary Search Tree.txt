Problem: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
Time Complexity: O(N), where N is the number of nodes in the BST. In the worst case we might be visiting all the nodes of the BST.
Auxillary Space:  O(N) this is because the maximum amount of space utilized by the recursion stack would be NN since the height of a skewed BST could be NN.
Code:
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL||root==p||root==q) return root;
        TreeNode* left=NULL;
        TreeNode* right=NULL;
        if(p->val<root->val||q->val<root->val)
            left=lowestCommonAncestor(root->left,p,q);
        if(p->val>root->val||q->val>root->val)
            right=lowestCommonAncestor(root->right,p,q);
        if(left&&right)
            return root;
        return left?left:right;
    }