Problem: https://leetcode.com/problems/delete-node-in-a-bst/
Time Complexity: O(n)
Auxillary Space: O(1), not considering recursive stack size, O(n) if size of recursive stack is taken into consideration.
Date: 14-10-2021
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return nullptr;
        if(root->val==key)
        {
            if(root->left==nullptr&&root->right==nullptr) //leaf 
            {
                return nullptr;
            }
            else if(root->left!=nullptr&&root->right!=nullptr)
            {
                TreeNode* curr=root->left;
                while(curr->right!=nullptr)
                {
                    curr=curr->right;
                }
                int t=curr->val;
                deleteNode(root,t);
                root->val=t;
                return root;
            }
            else
            {
                if(root->left)// single child
                {
                    return root->left;
                }
                else
                {
                    return root->right;
                }
            }
        }
        else if(root->val<key)
        {
            root->right=deleteNode(root->right,key);
        }
        else
        {
            root->left=deleteNode(root->left,key);
        }
        return root;
    }
};