Problem: https://leetcode.com/problems/balance-a-binary-search-tree/
Time Complexity: O(n)
Space Complexity: O(n)
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> sorted;
    void inorder(TreeNode* root)
    {
        if(!root) return;
        inorder(root->left);
        sorted.push_back(root->val);
        inorder(root->right);
    }
    TreeNode* buildBalanced(int l,int h)
    {
        if(l<=h)
        {
            int mid=l+(h-l)/2;
            TreeNode *root=new TreeNode(sorted[mid]);
            root->left=buildBalanced(l,mid-1);
            root->right=buildBalanced(mid+1,h);
            return root;
        }
        return nullptr;
    }
    TreeNode* balanceBST(TreeNode* root) {
        inorder(root);
        TreeNode* balroot=buildBalanced(0,sorted.size()-1);
        return balroot;
    }
};