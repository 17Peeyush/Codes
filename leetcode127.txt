class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> s(wordList.begin(),wordList.end());
        if(s.find(endWord)==s.end()) return 0;
        else
        {
            int l=beginWord.length();
            queue<string> que;
            que.push(beginWord);
            int count=1,size=1;
            while(!que.empty())
            {
                while(size>0)
                {
                    string c=que.front();
                    que.pop();
                    for(int i=0;i<l;i++)
                    {
                        char ch=c[i];
                        for(char x='a';x<='z';x++)
                        {
                            c[i]=x;
                            auto it=s.find(c);
                            if(it!=s.end())
                            {
                                if(c==endWord) return count+1;
                                else{ que.push(c);
                                    s.erase(it);}
                            }
                        }
                        c[i]=ch;
                    }
                    size--;
                }
                size=que.size();
                count++;
            }
        }
        return 0;
    }
};