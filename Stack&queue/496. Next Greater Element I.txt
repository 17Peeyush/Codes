Problem: https://leetcode.com/problems/next-greater-element-i/
Time Complexity: O(n)
Auxiliary Space: O(n)
Using stack and traversing the array from the right side.
Storing -1 for an element if stack is empty.
If stack top is greater than current element it is the next larger number.
If stack top is less than current element then we pop the stack until top is greater than current element as it will be the next larger element.
If in the above condition the stack becomes empty it means there is no larger element in array in the right side of current element.
Code:
vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
     unordered_map<int,int> mp;
        int n=nums2.size();
        stack<int>st;
        for(int i=n-1;i>=0;i--)
        {
            if(st.empty())
            {
                st.push(nums2[i]);
                mp[nums2[i]]=-1;
            }
            else if(nums2[i]<st.top())
            {
                mp[nums2[i]]=st.top();
                st.push(nums2[i]);
            }
            else if(nums2[i]>st.top())
            {
                while(!st.empty()&&nums2[i]>st.top())
                {
                    st.pop();
                }
                if(st.empty())
                {
                     st.push(nums2[i]);
                    mp[nums2[i]]=-1;
                }
                else
                {
                     mp[nums2[i]]=st.top();
                     st.push(nums2[i]);
                }
            }
        }
         n=nums1.size();
         vector<int>out(n);
        for(int i=0;i<n;i++)
            out[i]=mp[nums1[i]];
        return out;       
    }