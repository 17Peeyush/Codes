Problem: https://leetcode.com/problems/remove-k-digits/
Date: 18-02-2022
Time Complexity: O(n)
Auxillary Space: O(n)
Approach: We try to find first decreasing pairs of number then remove the number with higher value from left to right because leftmost digit is most significant digit and rightmost is the least significant digit.
There may a case arise that all the digits in given number is already sorted in increasing order then we will remove the last 'k' digits to get the answer.
Code:
class Solution {
public:
    string removeKdigits(string nums, int k) {
        int n=nums.length();
        int m=n-k;
        if(n==k) return "0";
        stack<char>st;
        int i=0;
        while(i<n&&k){
            if(st.empty()){
                if(nums[i]!='0')
                {
                    st.push(nums[i]);
                }
                i++;
            }
            else if(k&&st.top()>nums[i]){
                st.pop();
                k--;
            }
            else
            {
                st.push(nums[i]);
                i++;
            }
        }
        while(!st.empty()&&k--)
        {
            st.pop();
        }
        string output="";
        while(!st.empty())
        {
            output=st.top()+output;
            st.pop();
        }
        if(i<n)
        {
            if(output.length()==0)
            {
                while(i<n&&nums[i]=='0')
                i++;
            }
            output+=nums.substr(i);
        }
        if(output.length()==0)
            output="0";
        return output;
    }
};

Same approach clean code:
class Solution {
public:
    string removeKdigits(string nums, int k) {
        
        stack<char> st;
        //removing a character if a find a character less than it to its right side.
        for(char ch: nums){
            while(!st.empty()&&st.top()>ch&&k){
                k--;
                st.pop();
            }
            st.push(ch);
        }

        // the number is already given in increasing order
        while(k-- && !st.empty())
        {
            st.pop();
        }

        string output="";
        while(!st.empty()){
            output += st.top();
            st.pop();
        }
        int n=output.length();
        int i=n-1;
        // suppose we have someting starting with zero in the output like: 00200 (input 100200, k=1)
        while(i>=0&&output[i]=='0')
        {
            i--;
        }
        output = output.substr(0,i+1);
        if(output.size()==0)
        {
            return "0";
        }
        reverse(output.begin(),output.end());
        return output;
    }
};