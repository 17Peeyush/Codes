Problem: https://leetcode.com/problems/validate-stack-sequences/
Time Complexity: O(n)
Auxillary Space: O(1)
Code: 
class Solution {
public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        int n=pushed.size();
        stack<int> s;
        int i=0,j=0;
        while(i<n)
        {
            s.push(pushed[i]);
            i++;
            while(!s.empty()&&s.top()==popped[j])
            {
              s.pop();j++;   
            }
        }
        if(s.empty())
            return true;
        return false;
    }
};

Approach 2:
class Solution {
public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        stack <int> stk;
        int n = pushed.size();
        int j = 0;
        for(int i=0; i<n; i++){
            if(pushed[i] != popped[j]){
                stk.push(pushed[i]);
            }
                
            else if (pushed[i] == popped[j]){
                j++;
            }
            while (!stk.empty() && stk.top() == popped[j]){
                stk.pop();
j++;
            }  
            
        }
        while (j<n && stk.top() == popped[j]){
                stk.pop();
                j++;   
        }
        
        return stk.empty();
    }
};