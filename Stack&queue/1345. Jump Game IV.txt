Problem:
Date: 15-01-2022
Time Complexity: O(n^2)
Auxillary Space: O(n)
Code:
class Solution {
public:
  
    int minJumps(vector<int>& arr) {
        int n=arr.size();
        unordered_map<int,vector<int>>mp;
        for(int i=0;i<n;i++){
            mp[arr[i]].push_back(i);
        }
       queue<int>q;
        vector<bool>visited(n,false);
        q.push(0);
        visited[0]=true;
        int jump=0;
        while(!q.empty())
        {
            int size=q.size();
            while(size--)
            {
                int t=q.front();
                q.pop();
                if(t==n-1)
                    return jump;
                if(t+1<n&&visited[t+1]==false)
                {
                    q.push(t+1);
                    visited[t+1]=true;
                }
                if(t-1>=0&&visited[t-1]==false)
                {
                    q.push(t-1);
                    visited[t-1]=true;
                }
                if(mp.find(arr[t])!=mp.end())
                {
                    for(auto x:mp[arr[t]])
                    {
                        if(visited[x]==false)
                        {
                            q.push(x);
                            visited[x]=true;
                        }
                    }
                    mp.erase(arr[t]);
                }
                
            }
            jump++;
        }
        return jump;
    }
};