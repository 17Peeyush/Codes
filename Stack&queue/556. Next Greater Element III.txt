Problem: https://leetcode.com/problems/next-greater-element-iii
Time Complexity: O(n)
Auxiliary Space: O(1)
Approach:
In order to make the next largest from the current number intitutively see changing from the right end will least impact our answer and we can get the next largest number from our current number. We traverse and try to find the index which we can replace that is one whose right element is greater than it. As soon as we identify this index then we sort the elements after this index and then for optimal answer we traverse from index to end of array(number) and swap it with the first element greater then our index element.
Code:
class Solution {
public:
void swap(int&a,int&b){
    int t=a;
    a=b;
    b=t;
}
    int nextGreaterElement(int num) {
        vector<int>v;
        int i=0,index,j;
        while(num){
            v.push_back(num%10);
            num=num/10;
        }
        reverse(v.begin(),v.end());
        int n=v.size();
        for(i=n-1;i>0;i--){
            if(v[i-1]<v[i]){
                index = i-1;
                break;
            }
        }
        if(i==0){
            return -1;
        }
        i=index+1;
        j=n-1;
        while(i<=j){
            swap(v[i],v[j]);
            i++;j--;
        }
        for(i=index+1;i<n;i++){
            if(v[i]>v[index]){
                swap(v[i],v[index]);
                break;
            }
        }
        //SafeInt<int> res = 0;
        long long res=0;
        for(i=0;i<n;i++){
           res=(10*res)+v[i];
        }
        if(res>INT_MAX) return -1;
        return res;
    }
};