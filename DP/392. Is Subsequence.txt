Problem:Leetcode
Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters 
without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
Input: s = "abc", t = "ahbgdc"
Output: true

Example 2:
Input: s = "axc", t = "ahbgdc"
Output: false
 
Constraints:
0 <= s.length <= 100
0 <= t.length <= 10^4
s and t consist only of lowercase English letters.

Approach
1) DP
Time Complexity: O(n*m) where 'n' is the length of string 's' and 'm' is the length of string 't'.
Auxiliary Space: O(n*m)
The Longest Common Subsequence of the two string will be equal to the string s then we can say it is subquence of 't'.
We can check it directly if length of s is equal to length of lcs then 's' is the subsequence of 't'.

2)Two Pointer Approach:
Time Complexity: O(n+m) where 'n' is the length of string 's' and 'm' is the length of string 't'.
For 's' to be subsequence of 't' all character of 's' should be in 't'.
We check for each character in 's' if it matches with a character of 't' we move to next character in string 's' and in string 't'.
If character in 's' not found in 't' we move to next character in 't' hoping to find the current 's' character in 't'.
At last if the pointer of string 's' is equal to 's' length it means we have traversed whole string 's' and it is present in string 't' as a subsequence 
otherwise the string 's' is not subsequence of 't' .

 bool isSubsequence(string s, string t) {
        int i=0,j=0;
        while(i<s.length()&&j<t.length())
        {
            if(s[i]==t[j])
                i++;
            j++;
        }
        if(i==s.length())
            return true;
        return false;
    }
