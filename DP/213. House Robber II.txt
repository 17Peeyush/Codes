Problem: https://leetcode.com/problems/house-robber-ii/
Date: 09-03-2022
Time Complexity: O(2^n)
Auxiliary Space: O(n)
Code:
class Solution {
public:
    int dp[101];
    int helper(vector<int>&nums,int i,int j){
        if(i>=j)
        {
            return 0;
        }
        if(dp[i]!=-1)
            return dp[i];
        dp[i]=max(helper(nums,i+1,j),nums[i]+helper(nums,i+2,j));
        return dp[i];
    }
    int rob(vector<int>& nums) {
        if(nums.size()==1)
            return nums[0];
        if(nums.size()==2)
            return max(nums[0],nums[1]);
        memset(dp,-1,sizeof(dp));
        int a=helper(nums,0,nums.size()-1);
        memset(dp,-1,sizeof(dp));
        int b=helper(nums,1,nums.size());
        return max(a,b);
    }
};