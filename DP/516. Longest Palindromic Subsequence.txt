Problem:Leetcode
Given a string s, find the longest palindromic subsequence's length in s.
A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".

Example 2:
Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".
 
Constraints:
1 <= s.length <= 1000
s consists only of lowercase English letters.

Approach:
1)
Time  Complexity: O(n*n) where n is the length of the word
Auxiliary Space : O(n*n)
We reverse the original string and find the longest common subsequence it will be equal to longest palindromic subsequence.

Code:
int longestPalindromeSubseq(string s) {
        string sr=s;
        reverse(sr.begin(),sr.end());
        int n=s.length();
        int dp[n+1][n+1];
        for(int  i=0;i<n+1;i++)
        {
            for(int j=0;j<n+1;j++)
            {
                if(i==0||j==0) dp[i][j]=0;
                else if(s[i-1]==sr[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][n];
    }