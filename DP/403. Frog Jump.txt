Problem: https://leetcode.com/problems/frog-jump/
Companies: Google
Time Complexity: O(nlogn+n^2)
Auxiliary Space: O(n^2)
Code:
class Solution {
public:
    unordered_set<int>s;
    int last;
    //unordered_map<string,bool> visited;
    map<pair<int,int>,int> dp;
    int helper(int i, int k){
        if(k<=0) return 0;
        if(i==0)
        {
            return dp[{i,k}]=helper(i+1,k);
        }
        if(i==last){
            return 1;
        }
        else if(i>last){
            return 0;
        }
        if(s.find(i)==s.end()) return 0;
        if(dp.find({i,k})!=dp.end()) return dp[{i,k}];
        return dp[{i,k}]=helper(i+(k-1),k-1)||helper(i+(k),k)||helper(i+(k+1),k+1);
    }
    bool canCross(vector<int>& stones) {
        s = unordered_set<int> (stones.begin(),stones.end());
        //memset(dp,-1,sizeof(dp));
        last = stones[stones.size()-1];
        return helper(0,1);
    }
};