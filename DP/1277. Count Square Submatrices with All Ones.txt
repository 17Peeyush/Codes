Problem: https://leetcode.com/problems/count-square-submatrices-with-all-ones/description/
Companies: Google
Approach: Here a trick is used to get to answer. Suppose we are at (i,j) index and its value is '1' then how we can say we can form a 2X2 matrix if [i-1][j-1],[i-1][j],[i][j-1] all are '1' then (i,j) will be the bottom right of our square. If we see in this manner if all [i-1][j-1],[i-1][j],[i][j-1] are '2' then by aking (i,j) if it is 1 we can form a 3x3 matrix. We will follows pattern and fill our table. In the end will take the sum of all the values to get total number of squares.
Time Complexity: O(m*n)
Auxiliary Space: O(m*n)
Code:
class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            dp[i][0]=matrix[i][0];
        }
        for(int j=0;j<n;j++){
            dp[0][j]=matrix[0][j];
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(matrix[i][j]==1){
                    dp[i][j]= min(dp[i-1][j-1],min(dp[i][j-1],dp[i-1][j]))+1;
                }
            }
        }
        int squares=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                squares+=dp[i][j];
            }
        }
        return squares;
    }
};