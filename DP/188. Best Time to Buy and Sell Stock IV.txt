Problem: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/
Time Complexity: O(n*k), where n is the number of stocks and k is the number of transaction
Auxiliary Space: O(n*k)
Code:
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        if(n==0) return 0;
        vector<vector<int>>dp(k+1,vector<int>(n));
        //initialization
        for(int i=0;i<n;i++)
            dp[0][i]=0;
        for(int i=0;i<k;i++)
            dp[i][0]=0;
        //tabulation
        for(int i=1;i<k+1;i++){
            int maxi=INT_MIN;
            for(int j=1;j<n;j++){
                maxi=max(dp[i-1][j-1]-prices[j-1],maxi);
                dp[i][j]=max(dp[i][j-1],maxi+prices[j]);
            }
        }
        return dp[k][n-1];
    }
};