Problem:Leetcode
Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.
In one step, you can delete exactly one character in either string.

Example 1:
Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".

Example 2:
Input: word1 = "leetcode", word2 = "etco"
Output: 4
 
Constraints:
1 <= word1.length, word2.length <= 500
word1 and word2 consist of only lowercase English letters.

Approach:
Time  Complexity: O(n*m) where n,m is length ofstring word1, word2 respectively.
Auxillary  Space: O(n*m)
As from example 1 we try to find the longest common sequence from both words.
Then we are coverting word1 to lcs by deleting extra alphabets. [word1.length-lcs]
Then we are converting lcs to word2 by inserting remaining alphabets.[word2.length-lcs]
Total number of operations=[word1.length-lcs]+[word2.length-lcs]=word1.length+word2.length-2*lcs

Code:
int minDistance(string word1, string word2) {
        int n=word1.size(),m=word2.size();
        int dp[n+1][m+1];
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<m+1;j++)
            {
                if(i==0||j==0) dp[i][j]=0;
                else if(word1[i-1]==word2[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
            }
        }
        return n+m-2*dp[n][m];
    }