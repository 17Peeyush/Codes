Problem: https://practice.geeksforgeeks.org/problems/gold-mine-problem2608/1
Time Complexity: O(n*m)
Auxiliary Space: O(1)
Code:
class Solution{
public:
    int maxGold(int n, int m, vector<vector<int>> M)
    {
        if(n==1) 
        {
            return accumulate(M[0].begin(),M[0].end(),0);
        }
        else if(m==1)
        {
            int maxg=INT_MIN;
            for(int i=0;i<n;i++)
                maxg=max(maxg,M[i][0]);
            return maxg;
        }
        int maxgold=INT_MIN;
        for(int j=m-2;j>=0;j--)
        {
            
            for(int i=0;i<n;i++)
            {   int t=INT_MIN;
                if(i-1>=0)
                {
                    t=max(t,M[i-1][j+1]);
                }
                if(i+1<n)
                {
                    t=max(t,M[i+1][j+1]);
                }
                t=max(t,M[i][j+1]);
                M[i][j]+=t;
                if(j==0)
                {
                    maxgold=max(maxgold,M[i][j]);
                }
            }
        }
        
        return maxgold;
    }
};