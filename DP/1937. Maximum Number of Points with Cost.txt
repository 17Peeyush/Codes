Problem: https://leetcode.com/problems/maximum-number-of-points-with-cost
Approach: 
Here we are taking two arrays left and right to find the optimal answer. When we are at column 'j' the value at left[j-1] tells the maximum value we can get if we choose j-1 as it stores the optimal answer of choosing column from '0' to 'j-1' so based on it we choose the maxmum value between current column for left[j-1]-1 (here -1 is for column change penalty). Similary we create right array which as the optimal answer for range j+1 to 'n-1' (n is number of columns). Then we take the maximum of these both left[j] and right[j] to choose the maximum answer.
Time Complexity: O(m*3n) => O(m*n)
Auxiliary Space: O(m*n)
class Solution {
public:
    long long maxPoints(vector<vector<int>>& points) {
        int n =points.size();
        int m = points[0].size();
        vector<vector<long long>>dp(n,vector<long long>(m,0));
        long long res = INT_MIN;
        for(int j=0;j<m;j++){
            dp[0][j]=points[0][j];
        }
        for(int i=1;i<n;i++){
            vector<long long>left(m);
            vector<long long>right(m);
            left[0]=dp[i-1][0];
            for(int j=1;j<m;j++){
                left[j]=max(dp[i-1][j],left[j-1]-1);
            }
            right[m-1]=dp[i-1][m-1];
            for(int j=m-2;j>=0;j--){
                right[j]=max(dp[i-1][j],right[j+1]-1);
            }
            for(int j=0;j<m;j++){
                dp[i][j]=max(left[j],right[j])+points[i][j];
            }
        }
        for(int j=0;j<m;j++){
            res = max(res,dp[n-1][j]);
        }
        return res;
    }
};