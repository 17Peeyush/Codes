Problem:
Approach
(1)
Time Complexity: O(2^m*n), where m and n are dimension of input array
Auxillary Space: O(m*n)
Note: This approach was not able to pass all test cases. (TLE)
Code:
 int dp[102][102];
    int solve(int i,int j,int x,int y,int r,int c,vector<vector<int>>&ob)
    {
        if(i==x && j==y) return dp[i][j]=1;
        if(i>=r||j>=c||ob[i][j]==1) return dp[i][j]=0;
        return dp[i][j]=solve(i+1,j,x,y,r,c,ob)+solve(i,j+1,x,y,r,c,ob);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        if(obstacleGrid[0][0]==1||obstacleGrid[m-1][n-1]==1) return 0;
        memset(dp,0,sizeof(dp));
        return solve(0,0,m-1,n-1,m,n,obstacleGrid);
    }


(2)
Time Complexity: O(m*n), where m and n are dimension of input array
Auxillary Space: O(m*n)
Code:
 long long int  dp[102][102];
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        if(obstacleGrid[0][0]==1||obstacleGrid[m-1][n-1]==1) return 0;
        memset(dp,0,sizeof(dp));
        //initialization
        dp[m-1][n-1]=1;
        //Last Row
        for(int j=n-2;j>=0;j--)
        {
            if(obstacleGrid[m-1][j]!=1 && dp[m-1][j+1]==1) dp[m-1][j]=1;
            else dp[m-1][j]=0;
        }
	//Last Column
        for(int i=m-2;i>=0;i--)
        {
            if(obstacleGrid[i][n-1]!=1 && dp[i+1][n-1]==1) dp[i][n-1]=1;
            else dp[i][n-1]=0;
        }
        int r,d;
       for(int i=m-1;i>=0;i--)
       {
           for(int j=n-1;j>=0;j--)
           {
               if(i==m-1&&j==n-1) continue;
               if(obstacleGrid[i][j]==1) dp[i][j]=0;
               else dp[i][j]=dp[i+1][j]+dp[i][j+1];
           }
       }
        return dp[0][0];
       
    }