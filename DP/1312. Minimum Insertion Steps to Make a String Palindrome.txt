Problem: https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/
Time Complexity: O(n*n)
Auxiliary space: O(n*n)
Date: 16-10-2021
Here we find the longest palindromic subsequence and if we get that we know number of characters which are not following palindrome pattern and add that many characters.
Code:
class Solution {
public:
    int lps(string a,string b,int n)
    {
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<n+1;j++)
            {
                if(a[i-1]==b[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
                }
            }
        }
        return dp[n][n];
    }
    int minInsertions(string s) {
     int n=s.length();
     string rs=s;
     reverse(rs.begin(),rs.end());
     int ans= lps(s,rs,n); // longest palindromic subsequence
        return n-ans;
    }
};