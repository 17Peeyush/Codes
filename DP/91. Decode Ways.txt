Problem: 
Approach: 
(1) Recursion
Time Complexity: O(2^n)
Auxillary Space: O(h) where h is the height of recursive tree
Note: This approach was not able to pass all the test cases. (TLE)
Here we are chechking single character and 2 consecutive character.
If any one of them is leading to a valid decoded string then we increment 'c' which is number of valid decoded string.
Code:
 int c=0;
    void numDecode(int i,string s)
    {
        if(i==s.length())
          {  
            c++;
            return;
          }
        else
        {
          if(s[i]=='0') return; 
          if(i+1<s.length())
          {
              int n=stoi(s.substr(i,2));
              if(n<=26)
                  numDecode(i+2,s);
          }
          numDecode(i+1,s);
        }
    }
    int numDecodings(string s) {
        numDecode(0,s);
        return c;
    }

(2) Recursion + Memoziation
Time Complexity: O(2^n)
Auxillary Space: O(n) n is the number of character in the string.
Code:
int dp[102];
    int numDecode(int i,string s,int c)
    {
        if(i==s.length())
          {  
            c++;
            return c;
          }
        else if(dp[i]!=-1) return dp[i];
        else
        {
          if(s[i]=='0') {dp[i]=0;return dp[i];}  
          if(i+1<s.length())
          {
              int n=stoi(s.substr(i,2));
              if(n<=26)
              {dp[i+2]=numDecode(i+2,s,c);
               dp[i]=0;
              dp[i]+=dp[i+2];}
          }
          dp[i+1]=numDecode(i+1,s,c);
            if(dp[i]!=-1)
                dp[i]+=dp[i+1];
            else
                dp[i]=dp[i+1];
          return dp[i];
        }
        return 0;
    }
    int numDecodings(string s) {
        memset(dp,-1,sizeof(dp));
        numDecode(0,s,0);
        return dp[0];
    }