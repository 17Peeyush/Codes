Problem: https://leetcode.com/problems/house-robber/
Approach (1) Recursion + memoization
Time Complexity: O(2^n)
Auxillary Space: O(n)
Code:
class Solution {
public:
    int dp[404];
    int money(vector<int>&house,int n)
    {
        if(n<1) return 0;
        if(dp[n+2]!=-1) return dp[n+2];
        dp[n+2-1]=money(house,n-1);
        dp[n+2-2]=money(house,n-2);
        return dp[n+2]=max(dp[n+2-1],house[n-1]+dp[n+2-2]);
    }
    int rob(vector<int>& nums) {
       memset(dp,-1,sizeof(dp));
        return money(nums,nums.size());
    }
};

class Solution {
public:
    int dp[404];
    int money(vector<int>&house,int n)
    {
        if(n>=house.size()) return 0; 
        if(dp[n]!=-1)
            return dp[n];
        dp[n+1]=money(house,n+1);
        dp[n+2]=money(house,n+2);
        return dp[n]=max(dp[n+1],house[n]+dp[n+2]);
    }
    int rob(vector<int>& nums) {
       memset(dp,-1,sizeof(dp));
        return money(nums,0);
    }
};

Approach (2) Tabular Method:
Time Complexity: O(n)
Auxillary Space: O(n)
Code:
class Solution {
public:
    
    int rob(vector<int>& nums) {
       int n=nums.size();
        if(n==1) return nums[0];
        int dp[n];
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<n;i++)
        {
            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[n-1];
    }
};
