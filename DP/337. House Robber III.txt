Problem: https://leetcode.com/problems/house-robber-iii/
Time Complexity: O(2^n)
Auxillary Space: O(h) , h is the height of recursive tree
Date: 05-12-2021
Code:
(1)
Note: This approach was not able to pass all test cases.(TLE)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int helper(TreeNode* root,bool take){
        if(!root) return 0;
        else if(take){
            int t1=(root->val+helper(root->left,false)+helper(root->right,false));
            int t2=(helper(root->left,true)+helper(root->right,true));
            return max(t1,t2);
        }
        else
        {
            return (helper(root->left,true)+helper(root->right,true));
        }
        return 0;
    }
    int rob(TreeNode* root) {
        return helper(root,true);
    }
};

(2)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*,int>mp;
    int rob(TreeNode* root) {
        if(!root) return 0;
        if(mp.find(root)!=mp.end()) return mp[root];
        int ans=0;
        if(root->left)
            ans+=rob(root->left->left)+rob(root->left->right);
        if(root->right)
            ans+=rob(root->right->left)+rob(root->right->right);
        return mp[root]=max(root->val+ans,rob(root->left)+rob(root->right));
    }
};