Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  
If multiple answers exist, you may return any of them.
(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)

Example 1:
Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.

Example 2:
Input: str1="aggtab", str2="gxtxayb"
Output: "aggxtxayb" 

Note:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of lowercase English letters

Approach: 
Create dp table of longest common subsequence.
Creating short common supersequence string: Adding only once the lcs
Time  Complexity: O(n*m)
Space Complexity: O(n*m + length)

Code:
 string shortestCommonSupersequence(string str1, string str2) {
     int n=str1.length(),m=str2.length();
        int dp[n+1][m+1];
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<m+1;j++)
            {
                if(i==0||j==0) dp[i][j]=0;
                else if(str1[i-1]==str2[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
            }
        }
        
        // Storing supersequence
        int length=n+m-dp[n][m];
        string w(length,' ');
        int i=n,j=m;
        while(i>0&&j>0)
        {
            if(str1[i-1]==str2[j-1])
            {
                length--;
                w[length]=str1[i-1];
                i--;j--;
            }
            else
            {
                if(dp[i-1][j]>dp[i][j-1])
                {
                    length--;
                    w[length]=str1[i-1];
                    i--;
                }
                else
                {                    
                    length--;
                    w[length]=str2[j-1];   
                    j--;
                }
            }
        }
        while(i>0)
        {
            length--;
            w[length]=str1[i-1];
            i--;
        }
        while(j>0)
        {
            length--;
            w[length]=str2[j-1];
            j--;
        }
        return w;
    }