Problem: https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/
Time Complexity: O(n)
Auxiliary Space: O(h), where h is the tree
Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int MOD=1000000007;
    long maxs=0;
    int subSum(TreeNode* root)
    {
        if(!root) return 0;
        root->val+=subSum(root->left)+subSum(root->right);
        return root->val;
    }
    void maxP(TreeNode* root,long &tsum)
    {
        if(!root) return;
        maxs=max(maxs,(long)(tsum-(root->val))*(long)(root->val));
        maxP(root->left,tsum);
        maxP(root->right,tsum);
    }
    int maxProduct(TreeNode* root) {
     long ttsum=subSum(root); 
     maxP(root,ttsum);
        return maxs%MOD;
    }
};