Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Example 1
Input nums = [1,5,11,5]
Output true
Explanation The array can be partitioned as [1, 5, 5] and [11].

Example 2
Input nums = [1,2,3,5]
Output false
Explanation The array cannot be partitioned into equal sum subsets.
 
Constraints
1 = nums.length = 200
1 = nums[i] = 100

Approach: Variation of 0/1 knapsack (DP) Subset Sum.
Only difference is that here first we find if the sum ('SUM') of elements in array is even then we find if a subset having sum equal to 'SUM'/2.
Time  Complexity: O(n^2) or more precisely O(n*s) where n=num of elements in array and s is half of the total sum of each element of array.
Space Complexity: O(n*s)

Code:
bool canPartition(vector<int>& nums) {
        int sum=accumulate(nums.begin(),nums.end(),0);
        if(sum%2==0)
        {
            int n=nums.size(),s=sum/2;
            bool dp[n+1][s+1];
             for(int i=0;i<n+1;i++)
            {
                for(int j=0;j<s+1;j++)
                {
                    if(i==0) dp[i][j]=false;
                    if(j==0) dp[i][j]=true;
                }
            }
            for(int i=1;i<n+1;i++)
            {
                for(int j=1;j<s+1;j++)
                {
                     if(nums[i-1]<=j)
                    {
                        dp[i][j]=(dp[i-1][j-nums[i-1]]||dp[i-1][j]);
                    }
                    else
                    {
                        dp[i][j]=dp[i-1][j];
                    }
                }
            }

            return dp[n][s];
            
        }
        return false;
    }