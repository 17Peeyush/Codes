Problem:Leetcode
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.
An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:
s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

Example 1:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true

Example 2:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false

Example 3:
Input: s1 = "", s2 = "", s3 = ""
Output: true
 
Constraints:
0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.

Approach:
1)
Time  Complexity: O(2^(n+m)) where n is length of s1 and m is length of s2.
Space Complexity : O(m+n)O(m+n). The size of stack for recursive calls can go upto  m+n.

Note: This approach was not able to pass all the test cases. (TLE)
Code:
 bool helper(int i,int j,int k,string s1,string s2,string s3,int n){
        if(k+1==n)
        {
            if(i!=s1.size()&&s1[i]==s3[k]) return true;
            else if(j!=s2.size()&&s2[j]==s3[k]) return true;
            return false;
        }
        if(i<s1.length()&&j<s2.length()&&s1[i]==s3[k]&&s2[j]==s3[k])
        {
            return helper(i+1,j,k+1,s1,s2,s3,n)||helper(i,j+1,k+1,s1,s2,s3,n);
        }
        else if(i<s1.length()&&s1[i]==s3[k])
            return helper(i+1,j,k+1,s1,s2,s3,n);
        else if(j<s2.length()&&s2[j]==s3[k])
            return helper(i,j+1,k+1,s1,s2,s3,n);
        return false;
    }
    bool isInterleave(string s1, string s2, string s3) {
        if(s1.length()==0)
        {
            if(s2==s3) return true;
            else false;
        }
        if(s2.length()==0)
        {
            if(s1==s3) return true;
            else false;
        }
        if(s1.length()+s2.length()!=s3.length()) return false;
        return helper(0,0,0,s1,s2,s3,s3.length());
    }

2)Modified approach 1(memoziation)
Code:
vector<vector<int>>dp;
    bool helper(int i,int j,int k,string s1,string s2,string s3,int n){
       if(dp[i][j]!=-1) return dp[i][j];
        if(k+1==n)
        {
            if(i!=s1.size()&&s1[i]==s3[k]) return dp[i][j]= true;
            else if(j!=s2.size()&&s2[j]==s3[k]) return dp[i][j]=true;
            return dp[i][j]=false;
        }
        if(i<s1.length()&&j<s2.length()&&s1[i]==s3[k]&&s2[j]==s3[k])
        {
            return dp[i][j]=helper(i+1,j,k+1,s1,s2,s3,n)||helper(i,j+1,k+1,s1,s2,s3,n);
        }
        else if(i<s1.length()&&s1[i]==s3[k])
            return dp[i][j]=helper(i+1,j,k+1,s1,s2,s3,n);
        else if(j<s2.length()&&s2[j]==s3[k])
            return dp[i][j]=helper(i,j+1,k+1,s1,s2,s3,n);
        return dp[i][j]=false;
    }
    bool isInterleave(string s1, string s2, string s3) {
        if(s1.length()==0)
        {
            if(s2==s3) return true;
            else false;
        }
        if(s2.length()==0)
        {
            if(s1==s3) return true;
            else false;
        }
        if(s1.length()+s2.length()!=s3.length()) return false;
        dp.assign(s1.length()+1,vector<int>(s2.length()+1,-1));
        return helper(0,0,0,s1,s2,s3,s3.length());
    }