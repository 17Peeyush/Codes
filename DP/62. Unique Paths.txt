Problem: https://leetcode.com/problems/unique-paths/
Approach:
(1)Recursive + Memoziation
Time Complexity: O(2^m*n), where m and n are the dimension of the array( number of rows and columns respectively)
Space Complexity: O(m*n)
We start from index (0,0) then move in two direction right and bottom.
If we move past the boundary of matrix (row and column) we consider it invalid and return 0 as there is no way from that index to bottom right index.
If we are able to reach bottom right corner we return 1 as the path is possible there is one way.
We add the number of ways of path if we moved right and numbe of ways if we moved left and return out answer.
Note: This approach was not able to pass all the test cases. (TLE)
Code:
 int dp[102][102];
    int solve(int i,int j,int x,int y,int r,int c)
    {
        if(i==x && j==y) return dp[i][j]=1;
        if(i>=r||j>=c) return dp[i][j]=0;
        return dp[i][j]=solve(i+1,j,x,y,r,c)+solve(i,j+1,x,y,r,c);
    }
    int uniquePaths(int m, int n) {
        memset(dp,0,sizeof(dp));
        return solve(0,0,m-1,n-1,m,n);
    }

(2) Tabulation
Time Complexity: O(m*n), where m and n are the dimension of the array( number of rows and columns respectively)
Space Complexity: O(m*n)
Same above approach converted into tabular form.
Code:
 int dp[102][102];
    int uniquePaths(int m, int n) {
        memset(dp,0,sizeof(dp));
        dp[m-1][n-1]=1;
       for(int i=m-1;i>=0;i--)
       {
           for(int j=n-1;j>=0;j--)
           {
               if(i==m-1&&j==n-1) continue;
               dp[i][j]=dp[i+1][j]+dp[i][j+1];
           }
       }
        return dp[0][0];
    }