You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.
You may assume that you have an infinite number of each kind of coin.
The answer is guaranteed to fit into a signed 32-bit integer.

Example 1:
Input: amount = 5, coins = [1,2,5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

Example 2:
Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.

Example 3:
Input: amount = 10, coins = [10]
Output: 1
 
Constraints:
1 <= coins.length <= 300
1 <= coins[i] <= 5000
All the values of coins are unique.
0 <= amount <= 5000

Approach:
1)Recursion: Variation of unbounded knapsack.

Time  Complexity: O(2^n) As there are redundant subproblems.
Space Complexity: O(1) As no extra data structure has been used for storing values.

Code:
int coinchange(vector<int>&coins,int amount,int n)
    {
        if(n==0&&amount!=0) return 0;
        else if(amount==0) return 1;
        else if(coins[n-1]<=amount)
        {
            return (coinchange(coins,amount-coins[n-1],n)+coinchange(coins,amount,n-1));
        }
        else
        {
            return coinchange(coins,amount,n-1);
        }
        return 0;
    }

2)Dynamic Programming: Converting the above code in tabular form by bottom up method.
Time  Complexity: O(n*a) where n is number of elements in coins array and a is the amount.
Space Complexity: O(n*a)

Code:
int change(int a, vector<int>& coins) {
        int n=coins.size();
        int dp[n+1][a+1];
        for(int j=0;j<a+1;j++)
            dp[0][j]=0;
        for(int i=0;i<n+1;i++)
            dp[i][0]=1;
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<a+1;j++)
            {
                if(j>=coins[i-1])
                    dp[i][j]=dp[i][j-coins[i-1]]+dp[i-1][j];
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][a];
    }