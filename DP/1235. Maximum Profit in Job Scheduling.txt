Problem:Leetcode
We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].
You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.
If you choose a job that ends at time X you will be able to start another job that starts at time X.

Example 1:
Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.

Example 2:
Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.

Example 3:
Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6
 
Constraints:
1 <= startTime.length == endTime.length == profit.length <= 5 * 10^4
1 <= startTime[i] < endTime[i] <= 10^9
1 <= profit[i] <= 10^4

Approach:
(1) Recursive using activity selection and 0/1 knapsack
Time  Complexity: O(2^n)
Space Complexity: O(n)
Note: This code was not able to pass all the test cases.
Code:
 int js(vector<tuple<int,int,int>>&t,int c,int i,int n)
    {
        if(i==n) return 0;
        else if(get<0>(t[i])>=c)
        {
            return max(get<2>(t[i])+js(t,get<1>(t[i]),i+1,n),js(t,c,i+1,n));
        }
        else
            return js(t,c,i+1,n);
        return 0;
    }
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n=startTime.size();
        vector<tuple<int,int,int>> tup;
        for(int i=0;i<n;i++)
            tup.push_back(make_tuple(startTime[i],endTime[i],profit[i]));
        sort(tup.begin(),tup.end());
        return js(tup,1,0,startTime.size());
    }

(2) DP Weighted Job Sequencing 
Time  Complexity: O(n^2)
Space Complexity: O(3n+n)=O(n)
Note: This code was not able to pass all the test cases but performed better then previous method.
code:
int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n=startTime.size();
        vector<tuple<int,int,int>> tup;
        vector<int>p;
        for(int i=0;i<n;i++)
        {
            tup.push_back(make_tuple(endTime[i],startTime[i],profit[i]));
        }
        sort(tup.begin(),tup.end());
        for(int i=0;i<n;i++)
            p.push_back(get<2>(tup[i]));
        int maximum=0;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                int end=get<0>(tup[j]);
                if(end<=get<1>(tup[i]))
                {
                    p[i]=max(p[i],get<2>(tup[i])+p[j]);
                    if(p[i]>maximum)
                        maximum=p[i];
                }
            }
        }
        
        return maximum;
        
    }