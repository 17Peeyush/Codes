Problem: 
(1)
Time Complexity: O(2^n)
Auxillary Space: O(2^n)
Date: 16-10-2021
Note: This approach will not pass all the test cases.
Code:
class Solution {
public:
    int profit=0,n;
    void helper(bool b,vector<int>&prices,int i,int cp,int stock)
    {
        if(i>=n)
        {
            profit=max(profit,cp);
            return;
        }
        else if(b)// stock in hand
        {
            if(prices[i]>=stock)
            {
                helper(false,prices,i+2,cp+(prices[i]-stock),0);// sell
                helper(true,prices,i+1,cp,stock);// skip
            }
            else
            {
                helper(true,prices,i+1,cp,stock);// skip
            }
        }
        else // No stock in hand
        {
            helper(true,prices,i+1,cp,prices[i]); //buy
            helper(false,prices,i+1,cp,0); // skip
        }
    }
    int maxProfit(vector<int>& prices) {
        n=prices.size();
        // dp=vector<vector<int>>(2,vector<int>(n,-1));
        helper(false,prices,0,0,0);
        return profit;   
    }
};

(2)
Time Complexity: O(2^n)
Auxillary Space: O(2^n)
Code:
class Solution {
public:
    int n;
    unordered_map<string,int>mp;
    int helper(bool b,vector<int>&prices,int i)
    {
        if(i>=n)
        {
            return 0;
        }
        string key=to_string(i)+"@"+to_string(b);
        if(mp.find(key)!=mp.end()) return mp[key];
        int profit=0;
         if(b)// stock in hand
        {
           
            int t1=helper(0,prices,i+2)+prices[i];// sell
            int t2=helper(1,prices,i+1);// skip
            profit=max(t1,t2);
        }
        else // No stock in hand
        {
           int t1= helper(1,prices,i+1)-prices[i]; //buy
           int t2= helper(0,prices,i+1); // skip
            profit=max(t1,t2);
        }
        mp[key]=profit;
        return profit;
    }
    int maxProfit(vector<int>& prices) {
        n=prices.size();
        int profit=helper(false,prices,0);
        return profit;   
    }
};