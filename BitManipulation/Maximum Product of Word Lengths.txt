Problem from: Leetcode
Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.

Example 1:
Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".

Example 2:
Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".

Example 3:
Input: words = ["a","aa","aaa","aaaa"]
Output: 0
Explanation: No such pair of words.
 
Constraints:
2 <= words.length <= 1000
1 <= words[i].length <= 1000
words[i] consists only of lowercase English letters.

Approach:
(1)Naive approach
Time  Complexity: O(n^3)
Space Complexity: O(1000+1000) ~ O(1)
Consider a word and compare with other words if any word found with uncommon word present then multiply their length and sort in max variable. 
Note: We have used unordered set but this solution gave tle.
Code:
int maxProduct(vector<string>& words) {
        int n=words.size(),max=0;
        for(int i=0;i<n-1;i++)
        {
            int l1=words[i].length();
            for(int j=i+1;j<n;j++)
            { unordered_set<char> s(words[i].begin(),words[i].end());
                int l2=words[j].length();
                unordered_set<char> s2(words[j].begin(),words[j].end());
                for(auto x: s2)
                {
                    if(s.insert(x).second==false)
                    {
                        l2=0;
                        break;
                    }
                }
                // cout<<words[j]<<"\t"<<l2<<endl;
                l2*=l1;
                if(l2>max)
                    max=l2;
            }
        }
        return max;
    }

(2)
Time  Complexity: O(n^2)
Space Complexity: O(n*ac) where is ac number of alphabet
We have applied same approach as above but added an extra 2d array which for each word store the alphabets that are present in that word.

Code:
int maxProduct(vector<string>& words) {
        int n=words.size(),max=0;
        vector<vector<bool>>arr(n,vector<bool>(26,false));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<words[i].length();j++)
            {
                arr[i][words[i][j]-'a']=true;
            }
        }
        for(int i=0;i<n-1;i++)
        {
            int l1=words[i].length();
            for(int j=i+1;j<n;j++)
            {
                int f=-1,l2=words[j].length();
                for(int k=0;k<26;k++)
                {
                    if(arr[i][k]==true&&arr[j][k]==true)
                    {
                        l2=0;
                    }
                }
                l2*=l1;
                if(l2>max)
                    max=l2;
            }
        }
        return max;
    }
(3)
Time  Complexity: O(n^2)
Space Complexity: O(n)
We have applied same approach as above but instead of 2d array we have used int by help of bitwise operators which for each word store the alphabets that are present in that word.

Code:
int maxProduct(vector<string>& words) {
        int n=words.size(),max=0;
        vector<int>arr(n,0);
        for(int i=0;i<n;i++)
        {
           for(int j=0;j<words[i].length();j++)
               arr[i]|=(1<<(words[i][j]-'a'));
        }
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                    if((arr[i]&arr[j])==0)
                    {
                        if(words[i].length()*words[j].length()>max)
                            max=words[i].length()*words[j].length();
                    }
                
            }
        }
   
        return max;
    }