Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.

Example 1:
Input: left = 5, right = 7
Output: 4

Example 2:
Input: left = 0, right = 0
Output: 0

Example 3:
Input: left = 1, right = 2147483647
Output: 0
 
Constraints:
0 <= left <= right <= (2^31) - 1

Approach:
From observation:Suppose left=16 and right=19
16 : 10000 (binary)
19 : 10011 (binary)

If we right shift both left and right by 2 then result:
16>>2: 00100 
19>>2: 00100
Here we can see now both left and right are equal.

If we again left shift by same number of times (2)the resulting equal number.
10000 = 16 so we can conclude and of 16-19 (inclusive) will be equal to 16.

Code:
int rangeBitwiseAnd(int left, int right) {
        int c=0;
        while(left!=right)
        {
            left=left>>1;
            right=right>>1;
            c++;
        }
        return left<<c;
  }