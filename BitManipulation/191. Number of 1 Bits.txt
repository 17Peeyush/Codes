Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Example 1:
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

Example 2:
Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.

Example 3:
Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.

********Approach********
From Observation:
1st
n=5   in binary 101
n-1=4 in binary 100
n&n-1=100

2nd
n=4   in binary 100
n-1=3 in binary 011
n&n-1=000

Hence n now equal to zero => number of bit set = 2



********Code*********
 int hammingWeight(uint32_t n) {
     int count=0;
        while(n)
        {
            n=n&n-1;
            count++;
        }
        return count;
    }