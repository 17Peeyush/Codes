Problem: https://leetcode.com/problems/surrounded-regions/
Time Complexity: O(m*n)
Auxillary Space: O(m*n)
Date: 01-11-2021
Code:
class Solution {
public:
    vector<vector<bool>> visited;
    int r,c;
    bool isValid(int x,int y)
    {
        if(x>=0&&x<r&&y>=0&&y<c) return true;
        return false;
    }
    void dfs(int i,int j,vector<vector<char>>&board)
    {
        if(visited[i][j])
            return;
        visited[i][j]=true;
        int dx[]={0,0,1,-1};
        int dy[]={1,-1,0,0};
        for(int k=0;k<4;k++)
        {
            if(isValid(i+dx[k],j+dy[k])&&board[i][j]=='O')
            {
                dfs(i+dx[k],j+dy[k],board);
            }
        }
            
    }
    void solve(vector<vector<char>>& board) {
         r=board.size();
         c=board[0].size();
        visited=vector<vector<bool>>(r,vector<bool>(c,false));
        // col 0 and c-1
        for(int i=0;i<r;i++)
        {
            if(board[i][0]=='O')
            {
                dfs(i,0,board);
            }
            if(board[i][c-1]=='O')
            {
                dfs(i,c-1,board);
            }
        }
        // row 0 and r-1
        for(int j=0;j<c;j++)
        {
            if(board[0][j]=='O')
            {
                dfs(0,j,board);
            }
            if(board[r-1][j]=='O')
            {
                dfs(r-1,j,board);
            }
        }
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(board[i][j]=='O'&& !visited[i][j])
                {
                    board[i][j]='X';
                }
            }
        }
    }
};