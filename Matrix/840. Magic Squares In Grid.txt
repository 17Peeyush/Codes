Problem: https://leetcode.com/problems/magic-squares-in-grid
Time Complexity: O(m*n)
Auxiliary Space: O(1)
Note: All the elements in magic square are in range 1 to 9. 1+2+3+...+9=45 when divided in 3 parts equals 15. That is one optimization condition to sum if sum is not equal to the 15.
Code:
class Solution {
public:
    bool checkMagic(int i, int j,vector<vector<int>>&grid)
    {
        vector<int>fre(16,0);
        int sum = grid[i][j]+grid[i][j+1]+grid[i][j+2];
        if(sum!=15) return false;
        for(int x=i;x<i+3;x++)
        {
            int csum =0;
            for(int y=j;y<j+3;y++){
                if(grid[x][y]>9) return false;
                csum+=grid[x][y];
                fre[grid[x][y]]++;
            }
            if(csum!=sum) return false;
        }
        for(int i=1;i<10;i++)
        {
            if(fre[i]!=1) return false;
        }
        if((grid[i][j]+grid[i+1][j+1]+grid[i+2][j+2]!=sum)||(grid[i][j+2]+grid[i+1][j+1]+grid[i+2][j]!=sum)){
            return false;
        }
        for(int y=j;y<j+3;y++)
        {
            int csum =0;
            for(int x=i;x<i+3;x++)
            {
                csum+=grid[x][y];
            }
            if(csum!=sum) return false;
        }
        return true;
    }
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        int c =0;
        for(int i=0;i<n-2;i++){
            for(int j=0;j<m-2;j++){
                if(checkMagic(i,j,grid)){
                    c++;
                }
            }
        }
        return c;
    }
};