Problem: https://leetcode.com/problems/n-queens/
Time Complexity:T(n) = O(n^2) + n * T(n-1)
solving the above recurrence by iteration or recursion tree,
the time complexity of the nQueen problem is = O(N!)
Auxillary Space: O(n*n)
Date: 26-10-2021
Code:
class Solution {
public:
    vector<vector<string>> out;
    void convert(vector<vector<char>>&board,int n)
    {
        vector<string> temp;
        for(int i=0;i<n;i++)
        {
            string t="";
            for(int j=0;j<n;j++)
                t+=board[i][j];
            temp.push_back(t);
        }
        out.push_back(temp);
    }
    bool isValid(vector<vector<char>>board,int r,int c,int n)
    {
        if(r==0) return true;
        for(int i=r-1;i>=0;i--)// up
        {
            if(board[i][c]=='Q') return false;
        }
        int i=r,j=c;
        while(i>=0&&j>=0)// main diagonal
        {
            if(board[i][j]=='Q')
                return false;
            i--;j--;
        }
        i=r;j=c;
        while(i>=0&&j<n)// secondary diagonal
        {
            if(board[i][j]=='Q')
                return false;
            i--;j++;
        }
        return true;
    }

    void NQueen(int row,vector<vector<char>>&board,int n)
    {
        if(row==n)
        {
             convert(board,n);
            return;
        }
        for(int c=0;c<n;c++)
        {
           
            if(isValid(board,row,c,n))
            {
                board[row][c]='Q';
                NQueen(row+1,board,n);
                board[row][c]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<char>>board(n,vector<char> (n,'.'));
        NQueen(0,board,n);
        return out;
    }
};