Problem: https://leetcode.com/problems/path-with-maximum-gold
Time Complexity:O(m⋅n⋅4^g), g is number of gold cells
Auxillary Space: O(g)
Code:
class Solution {
public:
    int m,n,mxsum=0;
    bool valid(int i,int j){
        if(i>=m||i<0||j>=n||j<0) return false;
        return true;
    }
    vector<vector<bool>> visited;

    void helper(int i,int j, vector<vector<int>>&grid,int & sum){
        sum+=grid[i][j];
        mxsum = max(sum,mxsum);
        visited[i][j]=true;
        if(valid(i-1,j)&&!visited[i-1][j]&&grid[i-1][j]) helper(i-1,j,grid,sum);
        if(valid(i+1,j)&&!visited[i+1][j]&&grid[i+1][j]) helper(i+1,j,grid,sum);
        if(valid(i,j+1)&&!visited[i][j+1]&&grid[i][j+1]) helper(i,j+1,grid,sum);
        if(valid(i,j-1)&&!visited[i][j-1]&&grid[i][j-1]) helper(i,j-1,grid,sum);
        visited[i][j]=false;
        sum-=grid[i][j];
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        m=grid.size();
        n=grid[0].size();
        visited = vector<vector<bool>>(m,vector<bool>(n,false));
        int sum = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]!=0)
                {
                    helper(i,j,grid,sum);
                }
                sum =0;
            }
        }
        return mxsum;
    }
};