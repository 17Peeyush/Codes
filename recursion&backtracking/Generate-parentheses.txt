Problem: https://leetcode.com/problems/generate-parentheses/
Approach: Recursive
Time Complexity: O(2^n)
Auxillary Space: O(1) if ignoring recursive stack size
We have 2 choice either add "(" or ")". If adding "("or ")" voilates any condition  we return from that call:
condition 1: The number of opening bracket is always less than equal to number of closing bracket.
condition 2: Generate opening, closing brackets equal to given number.

Code:
vector<string> out;
    void gen(int open,int close,string input)
    {
        if(open==0&&close==0) 
        {
            out.push_back(input);
            return;
        }
        else if(open>close) return;
        else if(open<0||close<0) return;
        else if(input.length()==0)
        {
            gen(open-1,close,"(");
            return;
        }
        else
        {
            gen(open-1,close,input+"(");
            gen(open,close-1,input+")");
            return;
        }
    }
    vector<string> generateParenthesis(int n) {
      gen(n,n,"");  
     return  out;  
    }