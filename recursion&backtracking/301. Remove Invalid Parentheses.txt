Problem: https://leetcode.com/problems/remove-invalid-parentheses/
Time Complexity: O(2^n)+O(n)
Auxillary Sapce: O(n)
Date: 25-10-2021
(1)
Here we are checking for each parentheses whether after removing it we are getting a valid sequence of brackets.
Since we are checking all possibilities so we are getting answer were we are removing unnecessarily the brackets.
To tackle this problem we have created another function which will give the valid parentheses sequence of longest length. 
Note: This approach will not pass all test cases. (TLE: 110/127)
Code:
class Solution {
public:
    unordered_set<string> output;
    string str;
    int n;
    void invalid(int i,stack<char>s,string input)
    {
        if(i==n)
        {
            if(s.empty())
               { output.insert(input);
               }
            return;
        }
        if(str[i]=='('||str[i]==')')
        {
            invalid(i+1,s,input);// remove
            if(str[i]=='(')
            {
                s.push('(');
                invalid(i+1,s,input+'(');
            }
            else
            {
               if(!s.empty()){ s.pop();}
                else
                {
                    return;
                }
                invalid(i+1,s,input+')');
            }
        }
        else
        {
            invalid(i+1,s,input+str[i]);
        }
        
    }
    vector<string> maxlen()
    {
        unordered_map<int,vector<string>> mp;
        int mx=INT_MIN;
        for(auto x: output)
        {
            int l=x.length();
            mx=max(mx,l);
            if(mp.find(l)==mp.end())
            {   vector<string> temp;
             temp.push_back(x);
                mp[l]=temp;
            }
            else
            {
                mp[l].push_back(x);
            }
        }
        return mp[mx];
    }
    vector<string> removeInvalidParentheses(string s) {
        n=s.length();
        str=s;
        stack<char>st;
        invalid(0,st,"");
        return maxlen();
    }
};

(2)
Time Complexity: O(2^n)
Auxillary Space: O(n)
Date: 25-10-2021
Here first we are calculating the number of invalid brackets (say x) then only after stimulation of removable of 'x' number of bracket we are checking the given sequence validity.
Code:
class Solution {
public:
    unordered_set<string> output;
    unordered_set<string> again;
    pair<int,int> numInvalid(string s){
        stack<char>st;
        for(auto x:s)
        {
            if(x=='('||x==')')
            {
                if(x=='(')
                {
                    st.push('(');
                }
                else
                {
                    if(!st.empty())
                    {
                        if(st.top()=='(')
                            st.pop();
                        else
                            st.push(')');
                    }
                    else
                    {
                        st.push(')');
                    }
                }
            }
        }
        int open=0,close=0;
        while(!st.empty())
        {
            if(st.top()=='(')
                open++;
            else
                close++;
            st.pop();
        }
        return {open,close};
    }
    bool check(string s)
    {
        int flag=0;
        for(auto x: s)
        {
            if(x=='('||x==')')
            {
                if(x=='(')
                    flag++;
                else
                    flag--;
                if(flag<0)
                    return false;
            }
        }
        if(!flag)
            return true;
        return false;
    }
    void invalid(string s,int o,int c)
    {
        if(o<0||c<0) return;
        else if(o==0&&c==0)
        {
            if(check(s))
            {
                output.insert(s);
            }
            return;
        }
            if(again.find(s)!=again.end())
                return;
            int n=s.length();
            for(int i=0;i<n;i++)
            {
                if(s[i]=='('||s[i]==')')
                {
                    string temp=""+s.substr(0,i)+s.substr(i+1);
                    if(s[i]=='(')
                    {
                        invalid(temp,o-1,c);
                    }
                    else
                    {
                        invalid(temp,o,c-1);
                    }
                    again.insert(temp);
                }
            }
    }
    vector<string> removeInvalidParentheses(string s) {
        pair<int,int> bracket=numInvalid(s);
        invalid(s,bracket.first,bracket.second);
        vector<string> ans(output.begin(),output.end());
        return ans;
    }
};
