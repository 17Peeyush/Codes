Problem: https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/
Time Complexity: O(n)
Auxiliary Space: O(1)
Code:
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/

class Solution {
public:
   pair<Node*,Node*> flat(Node*head)
   {
       if(!head) return {nullptr,nullptr};
       Node *c=nullptr;
       Node* p=head;
       while(p!=nullptr)
       {
           if(p->child!=nullptr)
           {
               auto nlevel=flat(p->child);
               Node* nt=p->next;
               if(nt!=nullptr){
               p->next=nlevel.first;
               nlevel.first->prev=p;
               nlevel.second->next=nt;
               nt->prev=nlevel.second;
               p->child=nullptr;
               p=nlevel.second;
               }
               else
               {
                   p->next=nlevel.first;
                   nlevel.first->prev=p;
                   p->child=nullptr;
                   p=nlevel.second;
                   
               }
           }
           c=p;
           p=p->next;
       }
       return {head,c};
   }
    Node* flatten(Node* head) {
       auto h=flat(head);
        return h.first;
    }
};