Problem: https://leetcode.com/problems/reverse-linked-list-ii/
Approach:
Time Complexity: O(n)
Auxiliary Space: O(n)

Code:
 ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode *NewNode=new ListNode();
        NewNode->next=head;
        ListNode *p=head,* s=NewNode;
        int c=1;
        stack<ListNode*> st;
        while(p!=nullptr && c<=right)
        {
            if(c>=left)
            {
                st.push(p);
            }
            else
            {
                s=s->next;
            }
            p=p->next;
            c++;
        }
        while(!st.empty())
        {
            s->next=st.top();
            st.pop();
            s=s->next;
        }
        s->next=p;
        return NewNode->next;
    }