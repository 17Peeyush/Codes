Problem: https://leetcode.com/problems/rotate-list/
Time Complexity: O(n)
Auxillary Space: O(1)
Date: 21-09-2021
Code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!k||!head) return head;
        int n=0;
        ListNode*p=head,*Last=nullptr;
        while(p!=nullptr)
        {
            n++;
            Last=p;
            p=p->next;
        }
        // cout<<Last->val;
        if(n)
            k=k%n;
        if(k==0) return head;
        int tar=n-k;
        n=1;
        p=head;
        while(n<tar)
        {
            n++;
            p=p->next;
        }
        ListNode *new_head=p->next;
        p->next=nullptr;
        Last->next=head;
        return new_head; 
         
    }
};