Problem: https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/description/
Time Complexity: O(n)
Auxiliary Space: O(n)
Approach:
We will use prefixsum to solve the problem. If while iterating the linkedlist we find prefixsum and store in map, if we encounter the same prefix-sum again that means that the elements sum in between results to zero and we have to remove them. This can be simply done by rearranging the pointer but this will lead us to another problem our map will be inconsistent as it will have some node prefix-sum which we have removed from the linkedlist. We also those prefixsum enteries from the map and vola.
Code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeZeroSumSublists(ListNode* head) {
        if(head==nullptr) return nullptr;
        unordered_map<int, ListNode*>mp; 
        int prefixsum =0, sum=0;
        ListNode *t,*c, *dummy=new ListNode(0);
        dummy->next = head;
        c=head;
        mp[0]=dummy;
        while(c){
            prefixsum+=c->val;
            if(mp.find(prefixsum)!=mp.end())
            {
                t= mp[prefixsum];
                t=t->next;
                sum = prefixsum;
                while(t!=c){
                    sum+=t->val;
                    mp.erase(sum);
                    t=t->next;
                }
                t=mp[prefixsum];
                t->next=c->next;
            }
            else
            {
                mp[prefixsum]=c;
            }
            c=c->next;
        }
        return dummy->next;
    }
};