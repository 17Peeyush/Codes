Problem: https://leetcode.com/problems/double-a-number-represented-as-a-linked-list/
Time Complexity: O(n)
Auxillary Space: O(n) recursive stack
Code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int doubly(ListNode * head){
        int carry=0;
        if(head->next!=nullptr)
        {
           carry = doubly(head->next);
        }
        int v= head->val*2;
        //if(v>=10)
        {
            v+=carry;
            carry=v/10;
            v=v%10; 
        }
        head->val =v;
        return carry;
    }
    ListNode* doubleIt(ListNode* head) {
        int carry=doubly(head);
        cout<<carry;
        if(carry)
        {
            ListNode * d= new ListNode(carry);
            d->next=head;
            head=d;
        }
        return head;
    }
};