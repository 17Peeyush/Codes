Problem: https://leetcode.com/problems/continuous-subarray-sum/
Time Complexity: O(n)
Auxillary Space: O(n)
Code:
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        unordered_map<int,int>mp;
        int rem=0;
        mp[0]=-1;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            rem+=nums[i];
            rem%=k;
            if(mp.find(rem)!=mp.end())
            {
                if(i-mp[rem]>1) return true;
            }
            else
            {
                mp[rem]=i;
            }
        }
        return false;
    }
};
