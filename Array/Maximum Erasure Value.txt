Problem:Leetcode
You are given an array of positive integers nums and want to erase a subarray containing unique elements.
The score you get by erasing the subarray is equal to the sum of its elements.
Return the maximum score you can get by erasing exactly one subarray.
An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).

Example 1:
Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].

Example 2:
Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].
 
Constraints:
1 <= nums.length <= 10^5
1 <= nums[i] <= 10^4

Approach:
1)
Time  Complexity: O(n^2)
Space Complexity: O(n)
Check for all possible subarray example we take starting of a subarray from index 'i' and check element from 'i+1' index to 'n-1' index if we find unique element we add it to our sum.
For checking unique element we have used set.
Note: This approach was not able to clear all test cases. (TLE)

Code:
 int maximumUniqueSubarray(vector<int>& nums) {
     int max=0,sum=0,n=nums.size();
        for(int i=0;i<n;i++)
        {
            unordered_set<int> s;
            s.insert(nums[i]);
            sum=nums[i];
            for(int j=i+1;j<n;j++)
            {
                if(s.insert(nums[j]).second)
                {
                      sum+=nums[j];
                }
                else
                {
                    break;
                }
            }
            if(max<sum)
                max=sum;
        }
        return max;
    }

2)
Time  Complexity: O(n)
Space Complexity: O(n)
WE use two pointer approach. We start with two pointers 'start' and 'end' from starting index 0.
We start adding elements that are unique in a set and calculate running sum and update max sum and increment end pointer.
If we encounter an element that is already present in the set then we increament start pointer till we cross that repeating element and update the running sum and set accordingly.
Code:
int maximumUniqueSubarray(vector<int>& nums) {
     int max_sum=0,sum=0,n=nums.size(),start=0,end=0;
       unordered_set<int> s;
        while(end<n)
       {
           if(s.insert(nums[end]).second)
           {
               sum+=nums[end];
               max_sum=max(max_sum,sum);
                   end++;
           }
            else
            {
                 s.erase(nums[start]);
                    sum-=nums[start];
                    start++;
            }
       }
        return max_sum;
    }