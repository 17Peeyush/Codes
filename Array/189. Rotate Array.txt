Problem: https://leetcode.com/problems/rotate-array/
Approach:
1)
Time Complexity: O(n)
Auxiliary Space: O(n)
We are creating another temporary array then storing the shifted value for an index 'i'.
In the end copying the shifted value to original array. 
Code:
void rotate(vector<int>& nums, int k) {
          int n=nums.size();
          k=k%n;
          vector<int> temp(n);
          int si;
          for(int i=0;i<n;i++)
          {
              si=i+k;
              if(si>n-1)
                  si=si-n;
              temp[si]=nums[i];
          }
          for(int i=0;i<n;i++)
          {
              nums[i]=temp[i];
          }
          return;
      }

2)
Time Complexity: O(n)
Auxiliary Space: O(1)
Spliting the array into two parts: 
	First part: Array from index '0' to 'n-k-1'
	Second part: Array from index 'n-k' to 'n-1'
Reverse first and second part then whole array and it will provide desired result.   
Code:
void reverse(vector<int>&num,int low,int high)
    {
        while(low<high)
        {   
            swap(num[low],num[high]);
            low++;high--;
        }
    }
      void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k%=n;
        reverse(nums,0,n-k-1);
        reverse(nums,n-k,n-1);
        reverse(nums,0,n-1);
          return;
      }