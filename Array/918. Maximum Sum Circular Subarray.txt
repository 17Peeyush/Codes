Problem: https://leetcode.com/problems/maximum-sum-circular-subarray/
Time Complexity: O(n)
Auxillary Space: O(1)
Date: 06-12-2021
Code:
class Solution {
public:
    int kadane(vector<int>nums){
        int n=nums.size();
        int sum=nums[0],msum=nums[0];
        for(int i=1;i<n;i++)
        {
            if(nums[i]+sum>nums[i])
                sum+=nums[i];
            else
                sum=nums[i];
            msum=max(sum,msum);
        }
        return msum;
    }
    int maxSubarraySumCircular(vector<int>& nums) {
        int tsum=accumulate(nums.begin(),nums.end(),0);
        int simple=kadane(nums);
        for(int i=0;i<nums.size();i++)
        {
            nums[i]*=-1;
        }
        int circular=kadane(nums);
        if(tsum+circular==0) return simple;
        return max(simple,tsum+circular);
    }
};