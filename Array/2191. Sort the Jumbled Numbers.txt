Problem: https://leetcode.com/problems/sort-the-jumbled-numbers/description
Time Complexity: O(nlogn)
Auxiliary Space: O(n)
Code:
class Solution {
public:
    vector<int> mp;
    int convert(int num){
            if(num<10)
            {
                return mp[num];
            }
            int cnum=0,r;
            int i=0;
            int digitplace=1;
            while(num){
                r = num%10;
                cnum+=(mp[r]*digitplace);
                num=num/10;
                digitplace*=10;
            }
            return cnum;
    }
    vector<int> sortJumbled(vector<int>& mapping, vector<int>& nums) {
        mp=vector<int>(10,0);
        for(int i=0;i<10;i++){
            mp[i]=mapping[i];
        }

        int n = nums.size();
        vector<pair<int,int>>arr(n);
        for(int i=0;i<n;i++){
            arr[i]={convert(nums[i]),i};
        }
        sort(arr.begin(),arr.end());
        vector<int>res(n);
        for(int i=0;i<n;i++){
            res[i]=nums[arr[i].second];
            //cout<<arr[i].first<<"  : "<<arr[i].second<<endl;
        }
        return res;
    }
};