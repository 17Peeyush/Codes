Problem: https://leetcode.com/problems/minimum-number-of-moves-to-seat-everyone
Companies: Adobe
Time Complexities: O(nlogn)
Auxiliary Space: O(1)
Approach: The smallest positioned student will go to the smallest positioned chair, and then the next smallest positioned student will go to the next smallest positioned chair, and so on.
Code:
func abs( num int) int{
    if num<0{
        return -num
    }
    return num
}
func minMovesToSeat(seats []int, students []int) int {
    sort.Ints(seats)
    sort.Ints(students)
    n := len(seats)
    res :=0
    for i:=0;i<n;i++{
        res+=abs(seats[i]-students[i])
    }
    return res
}