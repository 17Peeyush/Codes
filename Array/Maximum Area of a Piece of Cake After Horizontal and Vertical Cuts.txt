Problem: Leetcode
Given a rectangular cake with height h and width w, and two arrays of integers horizontalCuts and verticalCuts where horizontalCuts[i] is the distance from 
the top of the rectangular cake to the ith horizontal cut and similarly, verticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut.
Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts.
Since the answer can be a huge number, return this modulo 10^9 + 7.

Example 1:
Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4 

Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6

Example 3:
Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9
 
Constraints:
2 <= h, w <= 10^9
1 <= horizontalCuts.length < min(h, 10^5)
1 <= verticalCuts.length < min(w, 10^5)
1 <= horizontalCuts[i] < h
1 <= verticalCuts[i] < w
It is guaranteed that all elements in horizontalCuts are distinct.
It is guaranteed that all elements in verticalCuts are distinct.

Approach:
Sort the arrays, then compute the maximum difference between two consecutive elements for horizontal cuts and vertical cuts.
The answer is the product of these maximum values in horizontal cuts and vertical cuts.
Note: This solution was not able to pass last test case because of integer overflow.
Time Complexity: O(nlogn)

int maxArea(int ver, int hor, vector<int>& horic, vector<int>& vertc) {
    sort(horic.begin(),horic.end());
    sort(vertc.begin(),vertc.end());
    int verm=vertc[0],horm=horic[0];
    for(int i=1;i<horic.size();i++)
        horm=max(horm,horic[i]-horic[i-1]);
    for(int i=1;i<vertc.size();i++)
    {  
    	verm=max(verm,vertc[i]-vertc[i-1]);}
    	horm=max(horm%1000000007,(ver-horic[horic.size()-1])%1000000007);
    	verm=max(verm%1000000007,(hor-vertc[vertc.size()-1])%1000000007);
    	unsigned long long int x= (((horm%1000000007)*(verm%1000000007))%1000000007);
    	x=x%1000000007;
    	return (int)x;
    }