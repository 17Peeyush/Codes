Problem: https://leetcode.com/problems/jump-game-ii/
Time Complexity: O(n^n)
Auxillary Space: O(1) ignoring recursive stack
Code:
(1)
class Solution {
public:
      int ming=INT_MAX,n;
    void minJump(int i,vector<int>&nums,int jumps)
    {
        if(i>=n-1) 
        {
            ming=min(ming,jumps);
        }
        else if(i+nums[i]>=n-1)
        {
            ming=min(ming,jumps+1);
        }
        else
        {
            for(int j=i+1;j<=i+nums[i];j++)
            {
                minJump(j,nums,jumps+1);
            }
        }
    }
    int jump(vector<int>& nums) {
        n=nums.size();
        minJump(0,nums,0);
        if(ming==INT_MAX) return -1;
        return ming;
    }
};

(2)
Time Complexity: O(n*n)
Auxillary Space: O(n)
Code:
class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n);
        dp[n-1]=0;
        for(int i=n-2;i>=0;i--)
        {
            if(nums[i]+i>=n-1)
                dp[i]=1;
            else
            {
                dp[i]=INT_MAX-1;
                for(int j=i+1;j<=i+nums[i];j++)
                {
                    dp[i]=min(dp[j]+1,dp[i]);
                }
            }
        }
        return dp[0];
    }
};

(3)
Time Complexity: O(n)
Auxillary Space: O(1)
Here we are using greedy approach.
First we are moving the maximum number of steps and after that we are considering the best move which will help us to cover largest distance.
Code:
class Solution {
public:
    int jump(vector<int>& nums) {
        int cr=0,mr=0,jumps=0;
        int n=nums.size();
        for(int i=0;i<n-1;i++)
        {
            if(i+nums[i]>mr)
            {
                mr=i+nums[i];
            }
            if(i==cr)
            {
                cr=mr;
                jumps++;
            }
        }
        return jumps;
    }
};