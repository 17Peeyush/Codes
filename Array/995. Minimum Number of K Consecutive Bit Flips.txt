Problem: https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/
Companies: Google, Amazon, Facebook, Bloomberg, Akuna
Approach:
A naive approach to solving this problem is to iterate the array from left to right and flip subarays whenever a 0 is encountered. This ensures that each 0 is flipped as soon as it is detected, ensuring no 0s remain in the array, assuming the k-grouping is possible. However, due to the problem constraints, this approach is not feasible.

So we an auxiliary array and a variable 'flipcount' to track the indexes we have flipped. 'k' elements starting from the flip index is affected. We keep track of this window for a current index 'i' by checking if there was a flip at 'i-k' index, if it happened then it should not affect our current index and we will reduce the flipcount. Next key observation is if an element 'x'(0,1) is flipped even number of times it will remain 'x'(0,1) but if it is flipped odd number of times then (0,1)=>(1,0), so we have to take care.
Our aim to flip any '0' encountered odd number of times so it becomes '1' and flip encountered '1' even number of times so it stays '1'. 

Follow up: instead of using an auxiliary array of size 'n' we can use a queue of window size 'k'.

Time Complexity: O(n)
Auxiliary Space: O(n)
Code:
class Solution {
public:
    int minKBitFlips(vector<int>& nums, int k) {
        int flipcount =0, n= nums.size(), totalflip = 0;
        vector<bool> flip(n,false);
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                if(i-k>=0){
                    if(flip[i-k])
                    {
                        flipcount --;
                    }
                }
                if(flipcount %2==0){
                    if(i+k>n) return -1;
                    flipcount++;
                    totalflip++;
                    flip[i]=true;
                }
            }
            else
            {
                if(i-k>=0){
                    if(flip[i-k])
                    {
                        flipcount --;
                    }
                }
                if(flipcount %2!=0){
                    if(i+k>n) return -1;
                    flipcount++;
                    totalflip++;
                    flip[i]=true;
                }
            }
        }
        return totalflip;
    }
};