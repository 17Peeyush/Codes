Problem: https://leetcode.com/problems/game-of-life/
Date: 12-02-2022
Time Complexity: O(mn)
Auxillary Space: O(1)
Code:
class Solution {
public:
    vector<vector<int>> directions = {{-1,-1},{1,1},{-1,1},{1,-1},{-1,0},{1,0},{0,-1},{0,1}};
    int check(vector<vector<int>>& board, int i, int j, int m, int n){
        int c = 0;
        for(auto d : directions){
            if(i+d[0]<m && i+d[0]>=0 && j+d[1]<n && j+d[1]>=0){
//                 valid direction
//                 if this is the first row
                   int val= board[i+d[0]][j+d[1]];
                  if(val==1||val==2||val==3)
                      c++;
                }
              }
        return c;
        }
    void gameOfLife(vector<vector<int>>& board) {
//         states = 1->0, 1->1, 0->1,0->0
        // vector<int> states = {2,3,-4,-5};
        int m = board.size();
        int n = board[0].size();
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                int c = check(board,i,j,m,n);
                if(board[i][j]==1||board[i][j]==2||board[i][j]==3) //life
                {
                    if(c<2)
                        board[i][j]=2;
                    else if(c==2||c==3)
                        board[i][j]=3;
                    else if(c>3)
                        board[i][j]=2;
                }
                else
                {
                    if(c==3)
                        board[i][j]=-4;
                    else
                        board[i][j]=-5;
                }
            }
        }
            for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                int val=board[i][j];
                if(val==2) board[i][j]=0;
                else if(val==3) board[i][j]=1;
                else if(val==-4) board[i][j]=1;
                else if(val==-5) board[i][j]=0;
            }
        }
    }
};
