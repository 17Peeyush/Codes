Problem:https://leetcode.com/problems/arithmetic-subarrays
Time Complexity: O(nlogn)
Auxiliary Space: O(n)
class Solution {
public:
    bool isArithmetic(vector<int>& sub)
    {
        int n= sub.size();
            unordered_set<int> s;
            bool flag = true;
            for(int j=0;j<n-1;j++)
            {
                s.insert(sub[j]-sub[j+1]);
                if(s.size()>1)
                {
                    return false;
                    break;
                }
            }
            return true;
    } 
    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {
        int m = l.size();
        vector<bool> res(m);
        for(int i =0;i<m;i++)
        {
            vector<int> sub;
            for(int j=l[i];j<=r[i];j++)
            {
                sub.push_back(nums[j]);
            }
            sort(sub.begin(),sub.end());
            res[i]=isArithmetic(sub);
        }
        return res;
    }
};