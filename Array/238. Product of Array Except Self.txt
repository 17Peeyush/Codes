Problem: https://leetcode.com/problems/product-of-array-except-self/
Time Complexity: O(n)
Auxillary Space: O(n)
Date: 27-11-2021
Code:
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int mul=1,zcount=0,zidx=-1,n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=0)
              {  mul*=nums[i];}
            else
            {
                zcount++;
                zidx=i;
            }
        }
        vector<int> output(n,0);
        if(zcount)
        {
            if(zcount==1)
            {
                output[zidx]=mul;
            }
        }
        else
        {
            for(int i=0;i<n;i++)
            {
                output[i]=mul/nums[i];
            }
        }
        return output;
        
    }
};

(2) Without using division operator
Code:
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int mul=1,n=nums.size();
        vector<int>left(n);
        vector<int>right(n);
        left[0]=1;
        right[n-1]=1;
        for(int i=1,j=n-2;i<n;i++,j--)
        {
           left[i]=left[i-1]*nums[i-1];
           right[j]=right[j+1]*nums[j+1];
        }
        vector<int> output(n);
        for(int i=0;i<n;i++)
            output[i]=left[i]*right[i];
        return output;
        
    }
};