Given an array of positive integers arr, calculate the sum of all possible odd-length subarrays.
A subarray is a contiguous subsequence of the array.
Return the sum of all odd-length subarrays of arr.

Example 1:
Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

Example 2:
Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.

Example 3:
Input: arr = [10,11,12]
Output: 66
 
Constraints:

1 <= arr.length <= 100
1 <= arr[i] <= 1000

Approach:
Count for each element in how many odd subarray it is comming.
Count the number of subarray starting and ending at each index.
And then multiply them i.e. total=start*end.
Divded total with 2 and take ceil of it and multiply it with the element at that index and add it to the sum.


Code:
int sumOddLengthSubarrays(vector<int>& arr) {
        int sum=0,l=arr.size();
        for(int i=0;i<l;i++)
        {
           int start=l-i;
           int end=i+1;
           int total =start*end;
           int mul=0;
            if(total%2!=0)
            {
                mul=total/2 + 1;
            }
            else { mul=total/2;}
            sum+=arr[i]*mul;
        }
        return sum;
    }