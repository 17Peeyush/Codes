Problem: https://leetcode.com/problems/frequency-of-the-most-frequent-element/
Time Complexity: O(nlogn)
Auxiliary Space: O(n)
Code:
class Solution {
public:
    bool helper(long long window, vector<int>&nums, long long k){
        long long sum=0;
        for(int i=0;i<window;i++){
            sum+=nums[i];
        }
        if(nums[window-1]*window - sum<=k)
            return true;
        int n = nums.size();
        for(int i=window, j=0;i<n;i++,j++){
            sum -= nums[j];
            sum +=nums[i];
            if(nums[i]*window - sum <=k){
                return true;
            }
        }
        return false;
    }
    int maxFrequency(vector<int>& nums, int k) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int l =1, r=n,mid;
        int res =1;
        while(l<=r){
            mid = l +(r-l)/2;
            if(helper(mid,nums,k)){
                l=mid+1;
                res = mid;
            }else{
                r = mid-1;
            }
        }
        return res;
    }
};