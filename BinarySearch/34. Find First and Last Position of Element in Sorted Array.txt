https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
Approach:
Time Complexity: O(n)
Auxiliary space: O(1)
We are performing binary search if we find the number then we search on its left side of array for first occurence and right side for the last occurence of the number.
Code:
int binarySearch(int l,int h,int n,vector<int>&arr,int flag)// flag->0==last occurence
    {
        int res=-1;
        while(l<=h)
        {
            int mid=l+(h-l)/2;
            if(arr[mid]==n)
            {
                res=mid;
                if(flag)
                    h=mid-1;
                else l=mid+1;
            }
            else if(arr[mid]<n)
            {
                l=mid+1;
            }
            else
            {
                h=mid-1;
            }
        }
        return res;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> out(2,-1);
        if(nums.size()!=0)
        {
            out[0]=binarySearch(0,nums.size()-1,target,nums,1);
            out[1]=binarySearch(0,nums.size()-1,target,nums,0);
        }
        return out;
    }