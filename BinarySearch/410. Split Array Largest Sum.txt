Problem: https://leetcode.com/problems/split-array-largest-sum/
Time Complexity: O(nlogn)
Auxiliary Space: O(1)
Here we are finding the maximum slipt value by using binary search. If slipt is possible in m parts then we search for lower value.
If split is not possible then we search for a higher value for which split is possible.
Code:
 bool valid(vector<int>&nums,int m,int mid)
    {
        int k=0,sum=0,n=nums.size();
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            if(sum>mid)
            {
                sum=nums[i];
                k++;
                if(k>=m)
                    return false;
            }
        }
        return true;
    }
    
    int splitArray(vector<int>& nums, int m) {
        int l=*max_element(nums.begin(),nums.end());
        if(nums.size()==m) return l;
        int h=accumulate(nums.begin(),nums.end(),0);
        int mid,res=0;
        while(l<=h)
        {
            mid=l+(h-l)/2;
            if(valid(nums,m,mid))
            {   
                res=mid;
                h=mid-1;
            }
            else
            {
               
                l=mid+1;
            }
        }
        return res;
    }
