Problem: https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/description/
Time Complexity: O(nlogn)
Space Complexity: O(logn)
Approach: Two pointer
#define MOD 1000000007
class Solution {
public:
    
    long long modexpo(int x,int n)
    {
        long long y=1;
        if(n==0)
            return 1;
        else if(n%2==0)
        {
            y=modexpo(x,n/2)%MOD;
            return ((y%MOD)*(y%MOD))%MOD; //(y*y)%MOD
        }
        else
        {
            return ((x%MOD)*modexpo(x,n-1)%MOD)%MOD;
        }
        return 1;
    }
    int numSubseq(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        long long count=0, n=nums.size();
        int i=0,j=n-1;
        while(i<=j)
        {
            if(nums[i]+nums[j]<=target)
            {
                count+=modexpo(2,j-i)%MOD;
                // (count%MOD+((long long)pow(2,j-i))%MOD)%MOD;
                i++;
            }
            else
            {
                j--;
            }
        }      
        return count%MOD;
    }
};