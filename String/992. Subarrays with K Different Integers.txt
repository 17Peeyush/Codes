Problem: https://leetcode.com/problems/subarrays-with-k-different-integers/
Date: 03-03-2022
Approach:
Time Complexity: O(n)
Auxiliary Space: O(n)
Code: 
class Solution {
public:
    int atmost(vector<int>&nums,int k){
        if(k<=0) return 0;
        unordered_map<int,int>mp;
        int n=nums.size(),i=0,j=0,count=0;//i==start j==end
        while(j<n){
           mp[nums[j]]++;
            while(mp.size()>k){
                mp[nums[i]]--;
                if(mp[nums[i]]==0) mp.erase(nums[i]);
                i++;
            }
          count+=j-i+1;
            j++;
        }
        return count;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return atmost(nums,k)-atmost(nums,k-1);
    }
};