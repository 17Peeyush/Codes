Problem: https://leetcode.com/problems/permutation-in-string/
Date: 11-02-2022
Time Complexity: O(m), where m is the length of string s2
Auxiliary Space: O(26) ~ O(1)
Code:
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if(s1.length()>s2.length())
        {
            return false;
        }
        vector<int> win1(26,0), win2(26,0);
        int hash=0;
        for(auto x:s1)
        {
            win1[x-'a']++;
            hash+=x;
        }
        int winsize=s1.length(),chash=0,n=s2.size();
        for(int i=0;i<winsize;i++)
        {
            win2[s2[i]-'a']++;
            chash+=s2[i];
        }
        if(hash==chash && win1==win2)
            return true;
        int start=0;
        for(int i=winsize;i<n;i++,start++)
        {
            win2[s2[start]-'a']--;
            chash-=s2[start];
            win2[s2[i]-'a']++;
            chash+=s2[i];
            if(hash==chash && win1==win2)
                return true;
        }
        return false;
    }
};
