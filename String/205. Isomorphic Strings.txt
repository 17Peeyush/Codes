Problem: https://leetcode.com/problems/isomorphic-strings/
Approach:
Time Complexity: O(n)
Auxillary Space: O(n)
Here we are storing the mapping from 's' to 't' and we are checking that no element can occurr with second mapping with other element.
Code:
 bool isIsomorphic(string s, string t) {
          int n=s.length();
       unordered_map<char,char> mp;
        unordered_set<char>se;
        for(int i=0;i<n;i++)
        {
            if(mp.find(s[i])==mp.end()&&se.find(t[i])==se.end())
            {
                mp.insert({s[i],t[i]});
                se.insert(t[i]);
            }
            else if(mp.find(s[i])!=mp.end())
            {
                if(mp[s[i]]!=t[i]) return false;
            }
            else
                return false;
        }
        return true;
    }

Time Complexity: O(n)
Auxillary Space: O(1)
Here we are taking 2 array of size 128(printable ascii).
We are using the fact in isomorphic string if a character is mapped to another then if in string 's' it is coming 'k' times at index 'i' then in 't' it should come 'k' times at index 'i'. 
Code:
 bool isIsomorphic(string s, string t) {
          int n=s.length();
       vector<int> m1(128,0);
        vector<int>m2(128,0);
        for(int i=0;i<n;i++)
        {
           if(m1[s[i]]==m2[t[i]])
           {
               m1[s[i]]=i+1;
               m2[t[i]]=i+1;
           }
            else
                return false;
        }
        return true;
    }