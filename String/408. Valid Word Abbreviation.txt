Problem: https://leetcode.com/problems/valid-word-abbreviation/description/
A string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.

For example, a string such as "substitution" could be abbreviated as (but not limited to):

"s10n" ("s ubstitutio n")
"sub4u4" ("sub stit u tion")
"12" ("substitution")
"su3i1u2on" ("su bst i t u ti on")
"substitution" (no substrings replaced)
The following are not valid abbreviations:

"s55n" ("s ubsti tutio n", the replaced substrings are adjacent)
"s010n" (has leading zeros)
"s0ubstitution" (replaces an empty substring)
Given a string word and an abbreviation abbr, return whether the string matches the given abbreviation.

A substring is a contiguous non-empty sequence of characters within a string.

Example 1:
Input: word = "internationalization", abbr = "i12iz4n"
Output: true
Explanation: The word "internationalization" can be abbreviated as "i12iz4n" ("i nternational iz atio n").

Example 2:
Input: word = "apple", abbr = "a2e"
Output: false
Explanation: The word "apple" cannot be abbreviated as "a2e".
 

Constraints:

1 <= word.length <= 20
word consists of only lowercase English letters.
1 <= abbr.length <= 10
abbr consists of lowercase English letters and digits.
All the integers in abbr will fit in a 32-bit integer.

Companies: Facebook, Amazon, Datadog, Google
Time Complexity: O(n)
Auxiliary Space: O(1)
Code:
class Solution {
public:
    bool validWordAbbreviation(string word, string abbr) {
        int n = word.size(), m = abbr.size();
        int i=0,j=0,jump;
        string t="";
        bool digit=false;
        while(i<n&&j<m){
            if(abbr[j]=='0')
            {
                return false;
            }
            while(j<m&&isdigit(abbr[j])){
                t+=string(1,abbr[j]);
                j++;
                digit = true;
            }
            if(digit){
                jump = stoi(t);
                if(i+jump>n){
                    return false;
                }else if(i+jump==n)
                {
                    if(j==m) return true;
                    return false;
                }else{
                    i=i+jump;
                    if(word[i]!=abbr[j]){
                        return false;
                    }
                }
                digit =false;
                t="";
            }
            while(i<n&&j<m&&word[i]==abbr[j]){
                i++;j++;
            }
        }
        if(i==n&&j!=m || i!=n&&j==m){
            return false;
        }
        return true;
    }
};