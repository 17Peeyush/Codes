Problem: https://leetcode.com/problems/iterator-for-combination/
Time Complexity: O(2^n)
Auxillary Space: O(h) where h is the height of recursive tree.
Date: 14-11-2021
Code:
class CombinationIterator {
public:
    vector<string> store;
    int index=-1;
    void combination(string c,int i,int cl,string input){
        int n=c.length();
        if(input.length()>cl) return;
        if(i==n)
        {
            if(input.length()==cl){
                store.push_back(input);
            }
            return;
        }
        combination(c,i+1,cl,input);
        input+=c[i];
        combination(c,i+1,cl,input);
    }
    CombinationIterator(string characters, int combinationLength) {
        if(characters.length()==combinationLength)
        {
            store.push_back(characters);
        }
        else
        {
             combination(characters,0,combinationLength,"");
        }
        index=0;
        sort(store.begin(),store.end());
    }
    
    string next() {
        string ans=store[index++];
        return ans;
    }
    
    bool hasNext() {
        if(index==store.size())
            return false;
        return true;
    }
};

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);
 * string param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */