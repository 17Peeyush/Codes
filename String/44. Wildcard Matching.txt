Problem: https://leetcode.com/problems/wildcard-matching/
Time Complexity: O(m*n)
Auxillary Space: O(m*n)
Date: 03-10-2021
Code:
class Solution {
public:
    vector<vector<int>>dp;
    int wild(string &s,string&p,int i,int j)
    {
        if(i==s.length()&&j==p.length()) return 1;
        if(i==s.length())
        {
            for(int id=j;id<p.length();id++)
            {
                if(p[id]!='*') return 0;
            }
            return 1;
        }
       
        if(i!=s.length()&&j==p.length()) return 0;
         int ans=0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(p[j]=='?')
        {
            if(wild(s,p,i+1,j+1)) ans=1;
        }
        else if(p[j]=='*')
        {
            if(wild(s,p,i,j+1)) ans=1;
            if(wild(s,p,i+1,j+1)) ans=1;
            if(wild(s,p,i+1,j))  ans=1;
        }
        else
        {
            if(p[j]==s[i]&&wild(s,p,i+1,j+1))
                ans=1;
        }
        return dp[i][j]=ans;
    }
    bool isMatch(string s, string p) {
       dp=vector<vector<int>>(s.length(),vector<int>(p.length(),-1));
        int ans= wild(s,p,0,0);
        return ans==1?true:false;
    }
};